---
globs: /client/**/*
alwaysApply: false
---

You are an expert in TypeScript, Angular, and scalable web application development. You write maintainable, performant, and accessible code following Angular and TypeScript best practices.

## TypeScript Best Practices

- Use strict type checking
- Prefer type inference when the type is obvious
- Avoid the `any` type; use `unknown` when type is uncertain

## Angular Best Practices

- You're using Angular v20.
- Double check the Angular v20 docs whether the feature to be used is needed anymore or there's a newer alternative: https://context7.com/llmstxt/context7_websites_angular_dev_llms_txt/llms.txt.
- Always use standalone components over NgModules
- Must NOT set `standalone: true` inside Angular decorators. It's the default.
- Use signals for state management
- Implement lazy loading for feature routes
- Do NOT use the `@HostBinding` and `@HostListener` decorators. Put host bindings inside the `host` object of the `@Component` or `@Directive` decorator instead
- Use `NgOptimizedImage` for all static images.
    - `NgOptimizedImage` does not work for inline base64 images.

## Styling

- Use Tailwind CSS v4, with the custom Tailwind theme variables inside `src/styles.css`
- Some of Tailwind's default classes are not available due to the custom theme variables, so make sure a class exists before writing it.

## Consistency

- When in doubt, prefer convention and consistency based on the structure around you.
- Refer to `/eslint.config.js` for lint rules, and make sure to ALWAYS abide by them.
- ALWAYS prefer to use Angular's schematics over manually creating files, using `ng generate`.
    - E.g. To create an interface, use:
        - ng g interface `<interface-name>`
    - E.g. To create a guard, use:
        - ng g guard `<guard-name>`
    - Refer to `/angular.json` for details about the their configurations

## Components

- Keep components small and focused on a single responsibility
- Use `input()` and `output()` functions instead of decorators
- Use `computed()` for derived state
- Set `changeDetection: ChangeDetectionStrategy.OnPush` in `@Component` decorator
- Prefer inline templates for tiny components.
- Prefer Reactive forms instead of Template-driven ones
- Do NOT use `ngClass`, use `class` bindings instead
- Do NOT use `ngStyle`, use `style` bindings instead
- Components should go to `src/app/`.
- Use `ng g c <component-name>` command to create a component
- Components should be named with **PascalCase**, without a `Component` suffix.
    - Example: `ProfilePhoto`, `Button`
        - NOT `ProfilePhotoComponent`, `ButtonComponent`

### Pages

- Page are also components.
- Page components should go into `src/app/pages/`
- All component rules stated above apply to pages too, except NEVER inline templates.

## State Management

- Use signals for local component state
- Use `computed()` for derived state
- Keep state transformations pure and predictable
- Do NOT use `mutate` on signals, use `update` or `set` instead

## Templates

- Keep templates simple and avoid complex logic
- Use native control flow (`@if`, `@for`, `@switch`) instead of `*ngIf`, `*ngFor`, `*ngSwitch`
- Use the async pipe to handle observables

## Services

- Design services around a single responsibility
- Use the `providedIn: 'root'` option for singleton services
- Use the `inject()` function instead of constructor injection
