---
globs: /server/**/*
alwaysApply: false
---

You are an expert in PHP, Laravel, and scalable backend web development. You write maintainable and performant code following PHP and Laravel best practices.

## General code instructions

-   Don't generate code comments above the methods or code blocks if they are obvious. Generate comments only for something that needs extra explanation for the reasons why that code was written

---

## PHP instructions

-   In PHP, use `match` operator over `switch` whenever possible
-   Use PHP 8 constructor property promotion. Don't create an empty Constructor method if it doesn't have any parameters.
-   Using Services in Controllers: if Service class is used only in ONE method of Controller, inject it directly into that method with type-hinting. If Service class is used in MULTIPLE methods of Controller, initialize it in Constructor.
-   Use return types in functions whenever possible, adding the full path to classname to the top in `use` section

---

## Laravel instructions

-   For DB pivot tables, use correct alphabetical order, like "project_role" instead of "role_project"
-   **Eloquent Observers** should be registered in Eloquent Models with PHP Attributes, and not in AppServiceProvider. Example: `#[ObservedBy([UserObserver::class])]` with `use Illuminate\Database\Eloquent\Attributes\ObservedBy;` on top
-   When generating Controllers, put validation in Form Request classes
-   Aim for "slim" Controllers and put larger logic pieces in Service classes
-   Use Laravel helpers instead of `use` section classes whenever possible. Examples: use `auth()->id()` instead of `Auth::id()` and adding `Auth` in the `use` section. Another example: use `redirect()->route()` instead of `Redirect::route()`.

---

## Use Laravel 11+ skeleton structure

-   **Service Providers**: there are no other service providers except AppServiceProvider. Don't create new service providers unless absolutely necessary. Use Laravel 11+ new features, instead. Or, if you really need to create a new service provider, register it in `bootstrap/providers.php` and not `config/app.php` like it used to be before Laravel 11.
-   **Event Listeners**: since Laravel 11, Listeners auto-listen for the events if they are type-hinted correctly.
-   **Console Scheduler**: scheduled commands should be in `routes/console.php` and not `app/Console/Kernel.php` which doesn't exist since Laravel 11.
-   **Middleware**: whenever possible, use Middleware by class name in the routes. But if you do need to register Middleware alias, it should be registered in `bootstrap/app.php` and not `app/Http/Kernel.php` which doesn't exist since Laravel 11.
-   **Faker**: in Factories, use `$this->faker` helper instead of `fake()`.
    -   In other places where `$this->faker` does not exist, do use `fake()` instead.
-   **Policies**: Laravel automatically auto-discovers Policies, no need to register them in the Service Providers.

---

## Testing instructions

Use Pest and not PHPUnit. Run tests with `php artisan test`.

Every test method should be structured with Arrange-Act-Assert.

In the Arrange phase, use Laravel factories but add meaningful column values and variable names if they help to understand failed tests better.
Bad example: `$user1 = User::factory()->create();`
Better example: `$adminUser = User::factory()->create(['email' => 'admin@admin.com'])`;

In the Assert phase, perform these assertions when applicable:

-   HTTP status code returned from Act: `assertStatus()`
-   Structure/data returned from Act (Blade or JSON): functions like `assertViewHas()`, `assertSee()`, `assertDontSee()` or `assertJsonContains()`
-   Or, redirect assertions like `assertRedirect()` and `assertSessionHas()` in case of Flash session values passed
-   DB changes if any create/update/delete operation was performed: functions like `assertDatabaseHas()`, `assertDatabaseMissing()`, `expect($variable)->toBe()` and similar.
