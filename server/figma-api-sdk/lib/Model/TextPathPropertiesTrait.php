<?php
/**
 * TextPathPropertiesTrait
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TextPathPropertiesTrait Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TextPathPropertiesTrait implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TextPathPropertiesTrait';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'characters' => 'string',
        'style' => '\OpenAPI\Client\Model\TextPathTypeStyle',
        'character_style_overrides' => 'float[]',
        'layout_version' => 'float',
        'style_override_table' => 'array<string,\OpenAPI\Client\Model\TextPathTypeStyle>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'characters' => null,
        'style' => null,
        'character_style_overrides' => null,
        'layout_version' => null,
        'style_override_table' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'characters' => false,
        'style' => false,
        'character_style_overrides' => false,
        'layout_version' => false,
        'style_override_table' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'characters' => 'characters',
        'style' => 'style',
        'character_style_overrides' => 'characterStyleOverrides',
        'layout_version' => 'layoutVersion',
        'style_override_table' => 'styleOverrideTable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'characters' => 'setCharacters',
        'style' => 'setStyle',
        'character_style_overrides' => 'setCharacterStyleOverrides',
        'layout_version' => 'setLayoutVersion',
        'style_override_table' => 'setStyleOverrideTable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'characters' => 'getCharacters',
        'style' => 'getStyle',
        'character_style_overrides' => 'getCharacterStyleOverrides',
        'layout_version' => 'getLayoutVersion',
        'style_override_table' => 'getStyleOverrideTable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('characters', $data ?? [], null);
        $this->setIfExists('style', $data ?? [], null);
        $this->setIfExists('character_style_overrides', $data ?? [], null);
        $this->setIfExists('layout_version', $data ?? [], null);
        $this->setIfExists('style_override_table', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['characters'] === null) {
            $invalidProperties[] = "'characters' can't be null";
        }
        if ($this->container['style'] === null) {
            $invalidProperties[] = "'style' can't be null";
        }
        if ($this->container['character_style_overrides'] === null) {
            $invalidProperties[] = "'character_style_overrides' can't be null";
        }
        if ($this->container['style_override_table'] === null) {
            $invalidProperties[] = "'style_override_table' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets characters
     *
     * @return string
     */
    public function getCharacters()
    {
        return $this->container['characters'];
    }

    /**
     * Sets characters
     *
     * @param string $characters The raw characters in the text path node.
     *
     * @return self
     */
    public function setCharacters($characters)
    {
        if (is_null($characters)) {
            throw new \InvalidArgumentException('non-nullable characters cannot be null');
        }
        $this->container['characters'] = $characters;

        return $this;
    }

    /**
     * Gets style
     *
     * @return \OpenAPI\Client\Model\TextPathTypeStyle
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param \OpenAPI\Client\Model\TextPathTypeStyle $style Style of text including font family and weight.
     *
     * @return self
     */
    public function setStyle($style)
    {
        if (is_null($style)) {
            throw new \InvalidArgumentException('non-nullable style cannot be null');
        }
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets character_style_overrides
     *
     * @return float[]
     */
    public function getCharacterStyleOverrides()
    {
        return $this->container['character_style_overrides'];
    }

    /**
     * Sets character_style_overrides
     *
     * @param float[] $character_style_overrides The array corresponds to characters in the text box, where each element references the 'styleOverrideTable' to apply specific styles to each character. The array's length can be less than or equal to the number of characters due to the removal of trailing zeros. Elements with a value of 0 indicate characters that use the default type style. If the array is shorter than the total number of characters, the characters beyond the array's length also use the default style.
     *
     * @return self
     */
    public function setCharacterStyleOverrides($character_style_overrides)
    {
        if (is_null($character_style_overrides)) {
            throw new \InvalidArgumentException('non-nullable character_style_overrides cannot be null');
        }
        $this->container['character_style_overrides'] = $character_style_overrides;

        return $this;
    }

    /**
     * Gets layout_version
     *
     * @return float|null
     */
    public function getLayoutVersion()
    {
        return $this->container['layout_version'];
    }

    /**
     * Sets layout_version
     *
     * @param float|null $layout_version Internal property, preserved for backward compatibility. Avoid using this value.
     *
     * @return self
     */
    public function setLayoutVersion($layout_version)
    {
        if (is_null($layout_version)) {
            throw new \InvalidArgumentException('non-nullable layout_version cannot be null');
        }
        $this->container['layout_version'] = $layout_version;

        return $this;
    }

    /**
     * Gets style_override_table
     *
     * @return array<string,\OpenAPI\Client\Model\TextPathTypeStyle>
     */
    public function getStyleOverrideTable()
    {
        return $this->container['style_override_table'];
    }

    /**
     * Sets style_override_table
     *
     * @param array<string,\OpenAPI\Client\Model\TextPathTypeStyle> $style_override_table Map from ID to TextPathTypeStyle for looking up style overrides.
     *
     * @return self
     */
    public function setStyleOverrideTable($style_override_table)
    {
        if (is_null($style_override_table)) {
            throw new \InvalidArgumentException('non-nullable style_override_table cannot be null');
        }
        $this->container['style_override_table'] = $style_override_table;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


