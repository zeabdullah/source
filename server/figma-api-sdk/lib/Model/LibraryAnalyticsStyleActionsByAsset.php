<?php
/**
 * LibraryAnalyticsStyleActionsByAsset
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LibraryAnalyticsStyleActionsByAsset Class Doc Comment
 *
 * @category Class
 * @description Library analytics style actions data broken down by asset.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LibraryAnalyticsStyleActionsByAsset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LibraryAnalyticsStyleActionsByAsset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'week' => 'string',
        'style_key' => 'string',
        'style_name' => 'string',
        'style_type' => 'string',
        'detachments' => 'float',
        'insertions' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'week' => null,
        'style_key' => null,
        'style_name' => null,
        'style_type' => null,
        'detachments' => null,
        'insertions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'week' => false,
        'style_key' => false,
        'style_name' => false,
        'style_type' => false,
        'detachments' => false,
        'insertions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'week' => 'week',
        'style_key' => 'style_key',
        'style_name' => 'style_name',
        'style_type' => 'style_type',
        'detachments' => 'detachments',
        'insertions' => 'insertions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'week' => 'setWeek',
        'style_key' => 'setStyleKey',
        'style_name' => 'setStyleName',
        'style_type' => 'setStyleType',
        'detachments' => 'setDetachments',
        'insertions' => 'setInsertions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'week' => 'getWeek',
        'style_key' => 'getStyleKey',
        'style_name' => 'getStyleName',
        'style_type' => 'getStyleType',
        'detachments' => 'getDetachments',
        'insertions' => 'getInsertions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('week', $data ?? [], null);
        $this->setIfExists('style_key', $data ?? [], null);
        $this->setIfExists('style_name', $data ?? [], null);
        $this->setIfExists('style_type', $data ?? [], null);
        $this->setIfExists('detachments', $data ?? [], null);
        $this->setIfExists('insertions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['week'] === null) {
            $invalidProperties[] = "'week' can't be null";
        }
        if ($this->container['style_key'] === null) {
            $invalidProperties[] = "'style_key' can't be null";
        }
        if ($this->container['style_name'] === null) {
            $invalidProperties[] = "'style_name' can't be null";
        }
        if ($this->container['style_type'] === null) {
            $invalidProperties[] = "'style_type' can't be null";
        }
        if ($this->container['detachments'] === null) {
            $invalidProperties[] = "'detachments' can't be null";
        }
        if ($this->container['insertions'] === null) {
            $invalidProperties[] = "'insertions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets week
     *
     * @return string
     */
    public function getWeek()
    {
        return $this->container['week'];
    }

    /**
     * Sets week
     *
     * @param string $week The date in ISO 8601 format. e.g. 2023-12-13
     *
     * @return self
     */
    public function setWeek($week)
    {
        if (is_null($week)) {
            throw new \InvalidArgumentException('non-nullable week cannot be null');
        }
        $this->container['week'] = $week;

        return $this;
    }

    /**
     * Gets style_key
     *
     * @return string
     */
    public function getStyleKey()
    {
        return $this->container['style_key'];
    }

    /**
     * Sets style_key
     *
     * @param string $style_key Unique, stable id of the style.
     *
     * @return self
     */
    public function setStyleKey($style_key)
    {
        if (is_null($style_key)) {
            throw new \InvalidArgumentException('non-nullable style_key cannot be null');
        }
        $this->container['style_key'] = $style_key;

        return $this;
    }

    /**
     * Gets style_name
     *
     * @return string
     */
    public function getStyleName()
    {
        return $this->container['style_name'];
    }

    /**
     * Sets style_name
     *
     * @param string $style_name The name of the style.
     *
     * @return self
     */
    public function setStyleName($style_name)
    {
        if (is_null($style_name)) {
            throw new \InvalidArgumentException('non-nullable style_name cannot be null');
        }
        $this->container['style_name'] = $style_name;

        return $this;
    }

    /**
     * Gets style_type
     *
     * @return string
     */
    public function getStyleType()
    {
        return $this->container['style_type'];
    }

    /**
     * Sets style_type
     *
     * @param string $style_type The type of the style.
     *
     * @return self
     */
    public function setStyleType($style_type)
    {
        if (is_null($style_type)) {
            throw new \InvalidArgumentException('non-nullable style_type cannot be null');
        }
        $this->container['style_type'] = $style_type;

        return $this;
    }

    /**
     * Gets detachments
     *
     * @return float
     */
    public function getDetachments()
    {
        return $this->container['detachments'];
    }

    /**
     * Sets detachments
     *
     * @param float $detachments The number of detach events for this period.
     *
     * @return self
     */
    public function setDetachments($detachments)
    {
        if (is_null($detachments)) {
            throw new \InvalidArgumentException('non-nullable detachments cannot be null');
        }
        $this->container['detachments'] = $detachments;

        return $this;
    }

    /**
     * Gets insertions
     *
     * @return float
     */
    public function getInsertions()
    {
        return $this->container['insertions'];
    }

    /**
     * Sets insertions
     *
     * @param float $insertions The number of insertion events for this period.
     *
     * @return self
     */
    public function setInsertions($insertions)
    {
        if (is_null($insertions)) {
            throw new \InvalidArgumentException('non-nullable insertions cannot be null');
        }
        $this->container['insertions'] = $insertions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


