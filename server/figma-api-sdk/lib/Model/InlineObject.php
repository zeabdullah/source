<?php
/**
 * InlineObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InlineObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'role' => 'string',
        'last_modified' => '\DateTime',
        'editor_type' => 'string',
        'thumbnail_url' => 'string',
        'version' => 'string',
        'document' => '\OpenAPI\Client\Model\DocumentNode',
        'components' => 'array<string,\OpenAPI\Client\Model\Component>',
        'component_sets' => 'array<string,\OpenAPI\Client\Model\ComponentSet>',
        'schema_version' => 'float',
        'styles' => 'array<string,\OpenAPI\Client\Model\Style>',
        'link_access' => 'string',
        'main_file_key' => 'string',
        'branches' => '\OpenAPI\Client\Model\InlineObjectBranchesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'role' => null,
        'last_modified' => 'date-time',
        'editor_type' => null,
        'thumbnail_url' => null,
        'version' => null,
        'document' => null,
        'components' => null,
        'component_sets' => null,
        'schema_version' => null,
        'styles' => null,
        'link_access' => null,
        'main_file_key' => null,
        'branches' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'role' => false,
        'last_modified' => false,
        'editor_type' => false,
        'thumbnail_url' => false,
        'version' => false,
        'document' => false,
        'components' => false,
        'component_sets' => false,
        'schema_version' => false,
        'styles' => false,
        'link_access' => false,
        'main_file_key' => false,
        'branches' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'role' => 'role',
        'last_modified' => 'lastModified',
        'editor_type' => 'editorType',
        'thumbnail_url' => 'thumbnailUrl',
        'version' => 'version',
        'document' => 'document',
        'components' => 'components',
        'component_sets' => 'componentSets',
        'schema_version' => 'schemaVersion',
        'styles' => 'styles',
        'link_access' => 'linkAccess',
        'main_file_key' => 'mainFileKey',
        'branches' => 'branches'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'role' => 'setRole',
        'last_modified' => 'setLastModified',
        'editor_type' => 'setEditorType',
        'thumbnail_url' => 'setThumbnailUrl',
        'version' => 'setVersion',
        'document' => 'setDocument',
        'components' => 'setComponents',
        'component_sets' => 'setComponentSets',
        'schema_version' => 'setSchemaVersion',
        'styles' => 'setStyles',
        'link_access' => 'setLinkAccess',
        'main_file_key' => 'setMainFileKey',
        'branches' => 'setBranches'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'role' => 'getRole',
        'last_modified' => 'getLastModified',
        'editor_type' => 'getEditorType',
        'thumbnail_url' => 'getThumbnailUrl',
        'version' => 'getVersion',
        'document' => 'getDocument',
        'components' => 'getComponents',
        'component_sets' => 'getComponentSets',
        'schema_version' => 'getSchemaVersion',
        'styles' => 'getStyles',
        'link_access' => 'getLinkAccess',
        'main_file_key' => 'getMainFileKey',
        'branches' => 'getBranches'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ROLE_OWNER = 'owner';
    public const ROLE_EDITOR = 'editor';
    public const ROLE_VIEWER = 'viewer';
    public const EDITOR_TYPE_FIGMA = 'figma';
    public const EDITOR_TYPE_FIGJAM = 'figjam';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_OWNER,
            self::ROLE_EDITOR,
            self::ROLE_VIEWER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEditorTypeAllowableValues()
    {
        return [
            self::EDITOR_TYPE_FIGMA,
            self::EDITOR_TYPE_FIGJAM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('editor_type', $data ?? [], null);
        $this->setIfExists('thumbnail_url', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('document', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('component_sets', $data ?? [], null);
        $this->setIfExists('schema_version', $data ?? [], 0);
        $this->setIfExists('styles', $data ?? [], null);
        $this->setIfExists('link_access', $data ?? [], null);
        $this->setIfExists('main_file_key', $data ?? [], null);
        $this->setIfExists('branches', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['role'] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        if ($this->container['editor_type'] === null) {
            $invalidProperties[] = "'editor_type' can't be null";
        }
        $allowedValues = $this->getEditorTypeAllowableValues();
        if (!is_null($this->container['editor_type']) && !in_array($this->container['editor_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'editor_type', must be one of '%s'",
                $this->container['editor_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['document'] === null) {
            $invalidProperties[] = "'document' can't be null";
        }
        if ($this->container['components'] === null) {
            $invalidProperties[] = "'components' can't be null";
        }
        if ($this->container['component_sets'] === null) {
            $invalidProperties[] = "'component_sets' can't be null";
        }
        if ($this->container['schema_version'] === null) {
            $invalidProperties[] = "'schema_version' can't be null";
        }
        if ($this->container['styles'] === null) {
            $invalidProperties[] = "'styles' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the file as it appears in the editor.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role The role of the user making the API request in relation to the file.
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified The UTC ISO 8601 time at which the file was last modified.
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets editor_type
     *
     * @return string
     */
    public function getEditorType()
    {
        return $this->container['editor_type'];
    }

    /**
     * Sets editor_type
     *
     * @param string $editor_type The type of editor associated with this file.
     *
     * @return self
     */
    public function setEditorType($editor_type)
    {
        if (is_null($editor_type)) {
            throw new \InvalidArgumentException('non-nullable editor_type cannot be null');
        }
        $allowedValues = $this->getEditorTypeAllowableValues();
        if (!in_array($editor_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'editor_type', must be one of '%s'",
                    $editor_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['editor_type'] = $editor_type;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string|null
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string|null $thumbnail_url A URL to a thumbnail image of the file.
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        if (is_null($thumbnail_url)) {
            throw new \InvalidArgumentException('non-nullable thumbnail_url cannot be null');
        }
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The version number of the file. This number is incremented when a file is modified and can be used to check if the file has changed between requests.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \OpenAPI\Client\Model\DocumentNode
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \OpenAPI\Client\Model\DocumentNode $document document
     *
     * @return self
     */
    public function setDocument($document)
    {
        if (is_null($document)) {
            throw new \InvalidArgumentException('non-nullable document cannot be null');
        }
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets components
     *
     * @return array<string,\OpenAPI\Client\Model\Component>
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param array<string,\OpenAPI\Client\Model\Component> $components A mapping from component IDs to component metadata.
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets component_sets
     *
     * @return array<string,\OpenAPI\Client\Model\ComponentSet>
     */
    public function getComponentSets()
    {
        return $this->container['component_sets'];
    }

    /**
     * Sets component_sets
     *
     * @param array<string,\OpenAPI\Client\Model\ComponentSet> $component_sets A mapping from component set IDs to component set metadata.
     *
     * @return self
     */
    public function setComponentSets($component_sets)
    {
        if (is_null($component_sets)) {
            throw new \InvalidArgumentException('non-nullable component_sets cannot be null');
        }
        $this->container['component_sets'] = $component_sets;

        return $this;
    }

    /**
     * Gets schema_version
     *
     * @return float
     */
    public function getSchemaVersion()
    {
        return $this->container['schema_version'];
    }

    /**
     * Sets schema_version
     *
     * @param float $schema_version The version of the file schema that this file uses.
     *
     * @return self
     */
    public function setSchemaVersion($schema_version)
    {
        if (is_null($schema_version)) {
            throw new \InvalidArgumentException('non-nullable schema_version cannot be null');
        }
        $this->container['schema_version'] = $schema_version;

        return $this;
    }

    /**
     * Gets styles
     *
     * @return array<string,\OpenAPI\Client\Model\Style>
     */
    public function getStyles()
    {
        return $this->container['styles'];
    }

    /**
     * Sets styles
     *
     * @param array<string,\OpenAPI\Client\Model\Style> $styles A mapping from style IDs to style metadata.
     *
     * @return self
     */
    public function setStyles($styles)
    {
        if (is_null($styles)) {
            throw new \InvalidArgumentException('non-nullable styles cannot be null');
        }
        $this->container['styles'] = $styles;

        return $this;
    }

    /**
     * Gets link_access
     *
     * @return string|null
     */
    public function getLinkAccess()
    {
        return $this->container['link_access'];
    }

    /**
     * Sets link_access
     *
     * @param string|null $link_access The share permission level of the file link.
     *
     * @return self
     */
    public function setLinkAccess($link_access)
    {
        if (is_null($link_access)) {
            throw new \InvalidArgumentException('non-nullable link_access cannot be null');
        }
        $this->container['link_access'] = $link_access;

        return $this;
    }

    /**
     * Gets main_file_key
     *
     * @return string|null
     */
    public function getMainFileKey()
    {
        return $this->container['main_file_key'];
    }

    /**
     * Sets main_file_key
     *
     * @param string|null $main_file_key The key of the main file for this file. If present, this file is a component or component set.
     *
     * @return self
     */
    public function setMainFileKey($main_file_key)
    {
        if (is_null($main_file_key)) {
            throw new \InvalidArgumentException('non-nullable main_file_key cannot be null');
        }
        $this->container['main_file_key'] = $main_file_key;

        return $this;
    }

    /**
     * Gets branches
     *
     * @return \OpenAPI\Client\Model\InlineObjectBranchesInner[]|null
     */
    public function getBranches()
    {
        return $this->container['branches'];
    }

    /**
     * Sets branches
     *
     * @param \OpenAPI\Client\Model\InlineObjectBranchesInner[]|null $branches A list of branches for this file.
     *
     * @return self
     */
    public function setBranches($branches)
    {
        if (is_null($branches)) {
            throw new \InvalidArgumentException('non-nullable branches cannot be null');
        }
        $this->container['branches'] = $branches;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


