<?php
/**
 * TypeStyle
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TypeStyle Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TypeStyle implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TypeStyle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'font_family' => 'string',
        'font_post_script_name' => 'string',
        'font_style' => 'string',
        'italic' => 'bool',
        'font_weight' => 'float',
        'font_size' => 'float',
        'text_case' => 'string',
        'text_align_horizontal' => 'string',
        'text_align_vertical' => 'string',
        'letter_spacing' => 'float',
        'fills' => '\OpenAPI\Client\Model\Paint[]',
        'hyperlink' => '\OpenAPI\Client\Model\Hyperlink',
        'opentype_flags' => 'array<string,float>',
        'semantic_weight' => 'string',
        'semantic_italic' => 'string',
        'paragraph_spacing' => 'float',
        'paragraph_indent' => 'float',
        'list_spacing' => 'float',
        'text_decoration' => 'string',
        'text_auto_resize' => 'string',
        'text_truncation' => 'string',
        'max_lines' => 'float',
        'line_height_px' => 'float',
        'line_height_percent' => 'float',
        'line_height_percent_font_size' => 'float',
        'line_height_unit' => 'string',
        'is_override_over_text_style' => 'bool',
        'bound_variables' => '\OpenAPI\Client\Model\TypeStyleAllOfBoundVariables'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'font_family' => null,
        'font_post_script_name' => null,
        'font_style' => null,
        'italic' => null,
        'font_weight' => null,
        'font_size' => null,
        'text_case' => null,
        'text_align_horizontal' => null,
        'text_align_vertical' => null,
        'letter_spacing' => null,
        'fills' => null,
        'hyperlink' => null,
        'opentype_flags' => null,
        'semantic_weight' => null,
        'semantic_italic' => null,
        'paragraph_spacing' => null,
        'paragraph_indent' => null,
        'list_spacing' => null,
        'text_decoration' => null,
        'text_auto_resize' => null,
        'text_truncation' => null,
        'max_lines' => null,
        'line_height_px' => null,
        'line_height_percent' => null,
        'line_height_percent_font_size' => null,
        'line_height_unit' => null,
        'is_override_over_text_style' => null,
        'bound_variables' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'font_family' => false,
        'font_post_script_name' => false,
        'font_style' => false,
        'italic' => false,
        'font_weight' => false,
        'font_size' => false,
        'text_case' => false,
        'text_align_horizontal' => false,
        'text_align_vertical' => false,
        'letter_spacing' => false,
        'fills' => false,
        'hyperlink' => false,
        'opentype_flags' => false,
        'semantic_weight' => false,
        'semantic_italic' => false,
        'paragraph_spacing' => false,
        'paragraph_indent' => false,
        'list_spacing' => false,
        'text_decoration' => false,
        'text_auto_resize' => false,
        'text_truncation' => false,
        'max_lines' => false,
        'line_height_px' => false,
        'line_height_percent' => false,
        'line_height_percent_font_size' => false,
        'line_height_unit' => false,
        'is_override_over_text_style' => false,
        'bound_variables' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'font_family' => 'fontFamily',
        'font_post_script_name' => 'fontPostScriptName',
        'font_style' => 'fontStyle',
        'italic' => 'italic',
        'font_weight' => 'fontWeight',
        'font_size' => 'fontSize',
        'text_case' => 'textCase',
        'text_align_horizontal' => 'textAlignHorizontal',
        'text_align_vertical' => 'textAlignVertical',
        'letter_spacing' => 'letterSpacing',
        'fills' => 'fills',
        'hyperlink' => 'hyperlink',
        'opentype_flags' => 'opentypeFlags',
        'semantic_weight' => 'semanticWeight',
        'semantic_italic' => 'semanticItalic',
        'paragraph_spacing' => 'paragraphSpacing',
        'paragraph_indent' => 'paragraphIndent',
        'list_spacing' => 'listSpacing',
        'text_decoration' => 'textDecoration',
        'text_auto_resize' => 'textAutoResize',
        'text_truncation' => 'textTruncation',
        'max_lines' => 'maxLines',
        'line_height_px' => 'lineHeightPx',
        'line_height_percent' => 'lineHeightPercent',
        'line_height_percent_font_size' => 'lineHeightPercentFontSize',
        'line_height_unit' => 'lineHeightUnit',
        'is_override_over_text_style' => 'isOverrideOverTextStyle',
        'bound_variables' => 'boundVariables'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'font_family' => 'setFontFamily',
        'font_post_script_name' => 'setFontPostScriptName',
        'font_style' => 'setFontStyle',
        'italic' => 'setItalic',
        'font_weight' => 'setFontWeight',
        'font_size' => 'setFontSize',
        'text_case' => 'setTextCase',
        'text_align_horizontal' => 'setTextAlignHorizontal',
        'text_align_vertical' => 'setTextAlignVertical',
        'letter_spacing' => 'setLetterSpacing',
        'fills' => 'setFills',
        'hyperlink' => 'setHyperlink',
        'opentype_flags' => 'setOpentypeFlags',
        'semantic_weight' => 'setSemanticWeight',
        'semantic_italic' => 'setSemanticItalic',
        'paragraph_spacing' => 'setParagraphSpacing',
        'paragraph_indent' => 'setParagraphIndent',
        'list_spacing' => 'setListSpacing',
        'text_decoration' => 'setTextDecoration',
        'text_auto_resize' => 'setTextAutoResize',
        'text_truncation' => 'setTextTruncation',
        'max_lines' => 'setMaxLines',
        'line_height_px' => 'setLineHeightPx',
        'line_height_percent' => 'setLineHeightPercent',
        'line_height_percent_font_size' => 'setLineHeightPercentFontSize',
        'line_height_unit' => 'setLineHeightUnit',
        'is_override_over_text_style' => 'setIsOverrideOverTextStyle',
        'bound_variables' => 'setBoundVariables'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'font_family' => 'getFontFamily',
        'font_post_script_name' => 'getFontPostScriptName',
        'font_style' => 'getFontStyle',
        'italic' => 'getItalic',
        'font_weight' => 'getFontWeight',
        'font_size' => 'getFontSize',
        'text_case' => 'getTextCase',
        'text_align_horizontal' => 'getTextAlignHorizontal',
        'text_align_vertical' => 'getTextAlignVertical',
        'letter_spacing' => 'getLetterSpacing',
        'fills' => 'getFills',
        'hyperlink' => 'getHyperlink',
        'opentype_flags' => 'getOpentypeFlags',
        'semantic_weight' => 'getSemanticWeight',
        'semantic_italic' => 'getSemanticItalic',
        'paragraph_spacing' => 'getParagraphSpacing',
        'paragraph_indent' => 'getParagraphIndent',
        'list_spacing' => 'getListSpacing',
        'text_decoration' => 'getTextDecoration',
        'text_auto_resize' => 'getTextAutoResize',
        'text_truncation' => 'getTextTruncation',
        'max_lines' => 'getMaxLines',
        'line_height_px' => 'getLineHeightPx',
        'line_height_percent' => 'getLineHeightPercent',
        'line_height_percent_font_size' => 'getLineHeightPercentFontSize',
        'line_height_unit' => 'getLineHeightUnit',
        'is_override_over_text_style' => 'getIsOverrideOverTextStyle',
        'bound_variables' => 'getBoundVariables'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TEXT_CASE_UPPER = 'UPPER';
    public const TEXT_CASE_LOWER = 'LOWER';
    public const TEXT_CASE_TITLE = 'TITLE';
    public const TEXT_CASE_SMALL_CAPS = 'SMALL_CAPS';
    public const TEXT_CASE_SMALL_CAPS_FORCED = 'SMALL_CAPS_FORCED';
    public const TEXT_ALIGN_HORIZONTAL_LEFT = 'LEFT';
    public const TEXT_ALIGN_HORIZONTAL_RIGHT = 'RIGHT';
    public const TEXT_ALIGN_HORIZONTAL_CENTER = 'CENTER';
    public const TEXT_ALIGN_HORIZONTAL_JUSTIFIED = 'JUSTIFIED';
    public const TEXT_ALIGN_VERTICAL_TOP = 'TOP';
    public const TEXT_ALIGN_VERTICAL_CENTER = 'CENTER';
    public const TEXT_ALIGN_VERTICAL_BOTTOM = 'BOTTOM';
    public const SEMANTIC_WEIGHT_BOLD = 'BOLD';
    public const SEMANTIC_WEIGHT_NORMAL = 'NORMAL';
    public const SEMANTIC_ITALIC_ITALIC = 'ITALIC';
    public const SEMANTIC_ITALIC_NORMAL = 'NORMAL';
    public const TEXT_DECORATION_NONE = 'NONE';
    public const TEXT_DECORATION_STRIKETHROUGH = 'STRIKETHROUGH';
    public const TEXT_DECORATION_UNDERLINE = 'UNDERLINE';
    public const TEXT_AUTO_RESIZE_NONE = 'NONE';
    public const TEXT_AUTO_RESIZE_WIDTH_AND_HEIGHT = 'WIDTH_AND_HEIGHT';
    public const TEXT_AUTO_RESIZE_HEIGHT = 'HEIGHT';
    public const TEXT_AUTO_RESIZE_TRUNCATE = 'TRUNCATE';
    public const TEXT_TRUNCATION_DISABLED = 'DISABLED';
    public const TEXT_TRUNCATION_ENDING = 'ENDING';
    public const LINE_HEIGHT_UNIT_PIXELS = 'PIXELS';
    public const LINE_HEIGHT_UNIT_FONT_SIZE = 'FONT_SIZE_%';
    public const LINE_HEIGHT_UNIT_INTRINSIC = 'INTRINSIC_%';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextCaseAllowableValues()
    {
        return [
            self::TEXT_CASE_UPPER,
            self::TEXT_CASE_LOWER,
            self::TEXT_CASE_TITLE,
            self::TEXT_CASE_SMALL_CAPS,
            self::TEXT_CASE_SMALL_CAPS_FORCED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextAlignHorizontalAllowableValues()
    {
        return [
            self::TEXT_ALIGN_HORIZONTAL_LEFT,
            self::TEXT_ALIGN_HORIZONTAL_RIGHT,
            self::TEXT_ALIGN_HORIZONTAL_CENTER,
            self::TEXT_ALIGN_HORIZONTAL_JUSTIFIED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextAlignVerticalAllowableValues()
    {
        return [
            self::TEXT_ALIGN_VERTICAL_TOP,
            self::TEXT_ALIGN_VERTICAL_CENTER,
            self::TEXT_ALIGN_VERTICAL_BOTTOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSemanticWeightAllowableValues()
    {
        return [
            self::SEMANTIC_WEIGHT_BOLD,
            self::SEMANTIC_WEIGHT_NORMAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSemanticItalicAllowableValues()
    {
        return [
            self::SEMANTIC_ITALIC_ITALIC,
            self::SEMANTIC_ITALIC_NORMAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextDecorationAllowableValues()
    {
        return [
            self::TEXT_DECORATION_NONE,
            self::TEXT_DECORATION_STRIKETHROUGH,
            self::TEXT_DECORATION_UNDERLINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextAutoResizeAllowableValues()
    {
        return [
            self::TEXT_AUTO_RESIZE_NONE,
            self::TEXT_AUTO_RESIZE_WIDTH_AND_HEIGHT,
            self::TEXT_AUTO_RESIZE_HEIGHT,
            self::TEXT_AUTO_RESIZE_TRUNCATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextTruncationAllowableValues()
    {
        return [
            self::TEXT_TRUNCATION_DISABLED,
            self::TEXT_TRUNCATION_ENDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLineHeightUnitAllowableValues()
    {
        return [
            self::LINE_HEIGHT_UNIT_PIXELS,
            self::LINE_HEIGHT_UNIT_FONT_SIZE,
            self::LINE_HEIGHT_UNIT_INTRINSIC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('font_family', $data ?? [], null);
        $this->setIfExists('font_post_script_name', $data ?? [], null);
        $this->setIfExists('font_style', $data ?? [], null);
        $this->setIfExists('italic', $data ?? [], false);
        $this->setIfExists('font_weight', $data ?? [], null);
        $this->setIfExists('font_size', $data ?? [], null);
        $this->setIfExists('text_case', $data ?? [], null);
        $this->setIfExists('text_align_horizontal', $data ?? [], null);
        $this->setIfExists('text_align_vertical', $data ?? [], null);
        $this->setIfExists('letter_spacing', $data ?? [], null);
        $this->setIfExists('fills', $data ?? [], null);
        $this->setIfExists('hyperlink', $data ?? [], null);
        $this->setIfExists('opentype_flags', $data ?? [], null);
        $this->setIfExists('semantic_weight', $data ?? [], null);
        $this->setIfExists('semantic_italic', $data ?? [], null);
        $this->setIfExists('paragraph_spacing', $data ?? [], 0);
        $this->setIfExists('paragraph_indent', $data ?? [], 0);
        $this->setIfExists('list_spacing', $data ?? [], 0);
        $this->setIfExists('text_decoration', $data ?? [], 'NONE');
        $this->setIfExists('text_auto_resize', $data ?? [], 'NONE');
        $this->setIfExists('text_truncation', $data ?? [], 'DISABLED');
        $this->setIfExists('max_lines', $data ?? [], null);
        $this->setIfExists('line_height_px', $data ?? [], null);
        $this->setIfExists('line_height_percent', $data ?? [], 100);
        $this->setIfExists('line_height_percent_font_size', $data ?? [], null);
        $this->setIfExists('line_height_unit', $data ?? [], null);
        $this->setIfExists('is_override_over_text_style', $data ?? [], null);
        $this->setIfExists('bound_variables', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTextCaseAllowableValues();
        if (!is_null($this->container['text_case']) && !in_array($this->container['text_case'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_case', must be one of '%s'",
                $this->container['text_case'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTextAlignHorizontalAllowableValues();
        if (!is_null($this->container['text_align_horizontal']) && !in_array($this->container['text_align_horizontal'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_align_horizontal', must be one of '%s'",
                $this->container['text_align_horizontal'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTextAlignVerticalAllowableValues();
        if (!is_null($this->container['text_align_vertical']) && !in_array($this->container['text_align_vertical'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_align_vertical', must be one of '%s'",
                $this->container['text_align_vertical'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSemanticWeightAllowableValues();
        if (!is_null($this->container['semantic_weight']) && !in_array($this->container['semantic_weight'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'semantic_weight', must be one of '%s'",
                $this->container['semantic_weight'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSemanticItalicAllowableValues();
        if (!is_null($this->container['semantic_italic']) && !in_array($this->container['semantic_italic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'semantic_italic', must be one of '%s'",
                $this->container['semantic_italic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTextDecorationAllowableValues();
        if (!is_null($this->container['text_decoration']) && !in_array($this->container['text_decoration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_decoration', must be one of '%s'",
                $this->container['text_decoration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTextAutoResizeAllowableValues();
        if (!is_null($this->container['text_auto_resize']) && !in_array($this->container['text_auto_resize'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_auto_resize', must be one of '%s'",
                $this->container['text_auto_resize'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTextTruncationAllowableValues();
        if (!is_null($this->container['text_truncation']) && !in_array($this->container['text_truncation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_truncation', must be one of '%s'",
                $this->container['text_truncation'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLineHeightUnitAllowableValues();
        if (!is_null($this->container['line_height_unit']) && !in_array($this->container['line_height_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'line_height_unit', must be one of '%s'",
                $this->container['line_height_unit'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets font_family
     *
     * @return string|null
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param string|null $font_family Font family of text (standard name).
     *
     * @return self
     */
    public function setFontFamily($font_family)
    {
        if (is_null($font_family)) {
            throw new \InvalidArgumentException('non-nullable font_family cannot be null');
        }
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_post_script_name
     *
     * @return string|null
     */
    public function getFontPostScriptName()
    {
        return $this->container['font_post_script_name'];
    }

    /**
     * Sets font_post_script_name
     *
     * @param string|null $font_post_script_name PostScript font name.
     *
     * @return self
     */
    public function setFontPostScriptName($font_post_script_name)
    {
        if (is_null($font_post_script_name)) {
            throw new \InvalidArgumentException('non-nullable font_post_script_name cannot be null');
        }
        $this->container['font_post_script_name'] = $font_post_script_name;

        return $this;
    }

    /**
     * Gets font_style
     *
     * @return string|null
     */
    public function getFontStyle()
    {
        return $this->container['font_style'];
    }

    /**
     * Sets font_style
     *
     * @param string|null $font_style Describes visual weight or emphasis, such as Bold or Italic.
     *
     * @return self
     */
    public function setFontStyle($font_style)
    {
        if (is_null($font_style)) {
            throw new \InvalidArgumentException('non-nullable font_style cannot be null');
        }
        $this->container['font_style'] = $font_style;

        return $this;
    }

    /**
     * Gets italic
     *
     * @return bool|null
     */
    public function getItalic()
    {
        return $this->container['italic'];
    }

    /**
     * Sets italic
     *
     * @param bool|null $italic Whether or not text is italicized.
     *
     * @return self
     */
    public function setItalic($italic)
    {
        if (is_null($italic)) {
            throw new \InvalidArgumentException('non-nullable italic cannot be null');
        }
        $this->container['italic'] = $italic;

        return $this;
    }

    /**
     * Gets font_weight
     *
     * @return float|null
     */
    public function getFontWeight()
    {
        return $this->container['font_weight'];
    }

    /**
     * Sets font_weight
     *
     * @param float|null $font_weight Numeric font weight.
     *
     * @return self
     */
    public function setFontWeight($font_weight)
    {
        if (is_null($font_weight)) {
            throw new \InvalidArgumentException('non-nullable font_weight cannot be null');
        }
        $this->container['font_weight'] = $font_weight;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return float|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param float|null $font_size Font size in px.
     *
     * @return self
     */
    public function setFontSize($font_size)
    {
        if (is_null($font_size)) {
            throw new \InvalidArgumentException('non-nullable font_size cannot be null');
        }
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets text_case
     *
     * @return string|null
     */
    public function getTextCase()
    {
        return $this->container['text_case'];
    }

    /**
     * Sets text_case
     *
     * @param string|null $text_case Text casing applied to the node, default is the original casing.
     *
     * @return self
     */
    public function setTextCase($text_case)
    {
        if (is_null($text_case)) {
            throw new \InvalidArgumentException('non-nullable text_case cannot be null');
        }
        $allowedValues = $this->getTextCaseAllowableValues();
        if (!in_array($text_case, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_case', must be one of '%s'",
                    $text_case,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_case'] = $text_case;

        return $this;
    }

    /**
     * Gets text_align_horizontal
     *
     * @return string|null
     */
    public function getTextAlignHorizontal()
    {
        return $this->container['text_align_horizontal'];
    }

    /**
     * Sets text_align_horizontal
     *
     * @param string|null $text_align_horizontal Horizontal text alignment as string enum.
     *
     * @return self
     */
    public function setTextAlignHorizontal($text_align_horizontal)
    {
        if (is_null($text_align_horizontal)) {
            throw new \InvalidArgumentException('non-nullable text_align_horizontal cannot be null');
        }
        $allowedValues = $this->getTextAlignHorizontalAllowableValues();
        if (!in_array($text_align_horizontal, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_align_horizontal', must be one of '%s'",
                    $text_align_horizontal,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_align_horizontal'] = $text_align_horizontal;

        return $this;
    }

    /**
     * Gets text_align_vertical
     *
     * @return string|null
     */
    public function getTextAlignVertical()
    {
        return $this->container['text_align_vertical'];
    }

    /**
     * Sets text_align_vertical
     *
     * @param string|null $text_align_vertical Vertical text alignment as string enum.
     *
     * @return self
     */
    public function setTextAlignVertical($text_align_vertical)
    {
        if (is_null($text_align_vertical)) {
            throw new \InvalidArgumentException('non-nullable text_align_vertical cannot be null');
        }
        $allowedValues = $this->getTextAlignVerticalAllowableValues();
        if (!in_array($text_align_vertical, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_align_vertical', must be one of '%s'",
                    $text_align_vertical,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_align_vertical'] = $text_align_vertical;

        return $this;
    }

    /**
     * Gets letter_spacing
     *
     * @return float|null
     */
    public function getLetterSpacing()
    {
        return $this->container['letter_spacing'];
    }

    /**
     * Sets letter_spacing
     *
     * @param float|null $letter_spacing Space between characters in px.
     *
     * @return self
     */
    public function setLetterSpacing($letter_spacing)
    {
        if (is_null($letter_spacing)) {
            throw new \InvalidArgumentException('non-nullable letter_spacing cannot be null');
        }
        $this->container['letter_spacing'] = $letter_spacing;

        return $this;
    }

    /**
     * Gets fills
     *
     * @return \OpenAPI\Client\Model\Paint[]|null
     */
    public function getFills()
    {
        return $this->container['fills'];
    }

    /**
     * Sets fills
     *
     * @param \OpenAPI\Client\Model\Paint[]|null $fills An array of fill paints applied to the characters.
     *
     * @return self
     */
    public function setFills($fills)
    {
        if (is_null($fills)) {
            throw new \InvalidArgumentException('non-nullable fills cannot be null');
        }
        $this->container['fills'] = $fills;

        return $this;
    }

    /**
     * Gets hyperlink
     *
     * @return \OpenAPI\Client\Model\Hyperlink|null
     */
    public function getHyperlink()
    {
        return $this->container['hyperlink'];
    }

    /**
     * Sets hyperlink
     *
     * @param \OpenAPI\Client\Model\Hyperlink|null $hyperlink Link to a URL or frame.
     *
     * @return self
     */
    public function setHyperlink($hyperlink)
    {
        if (is_null($hyperlink)) {
            throw new \InvalidArgumentException('non-nullable hyperlink cannot be null');
        }
        $this->container['hyperlink'] = $hyperlink;

        return $this;
    }

    /**
     * Gets opentype_flags
     *
     * @return array<string,float>|null
     */
    public function getOpentypeFlags()
    {
        return $this->container['opentype_flags'];
    }

    /**
     * Sets opentype_flags
     *
     * @param array<string,float>|null $opentype_flags A map of OpenType feature flags to 1 or 0, 1 if it is enabled and 0 if it is disabled. Note that some flags aren't reflected here. For example, SMCP (small caps) is still represented by the `textCase` field.
     *
     * @return self
     */
    public function setOpentypeFlags($opentype_flags)
    {
        if (is_null($opentype_flags)) {
            throw new \InvalidArgumentException('non-nullable opentype_flags cannot be null');
        }
        $this->container['opentype_flags'] = $opentype_flags;

        return $this;
    }

    /**
     * Gets semantic_weight
     *
     * @return string|null
     */
    public function getSemanticWeight()
    {
        return $this->container['semantic_weight'];
    }

    /**
     * Sets semantic_weight
     *
     * @param string|null $semantic_weight Indicates how the font weight was overridden when there is a text style override.
     *
     * @return self
     */
    public function setSemanticWeight($semantic_weight)
    {
        if (is_null($semantic_weight)) {
            throw new \InvalidArgumentException('non-nullable semantic_weight cannot be null');
        }
        $allowedValues = $this->getSemanticWeightAllowableValues();
        if (!in_array($semantic_weight, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'semantic_weight', must be one of '%s'",
                    $semantic_weight,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['semantic_weight'] = $semantic_weight;

        return $this;
    }

    /**
     * Gets semantic_italic
     *
     * @return string|null
     */
    public function getSemanticItalic()
    {
        return $this->container['semantic_italic'];
    }

    /**
     * Sets semantic_italic
     *
     * @param string|null $semantic_italic Indicates how the font style was overridden when there is a text style override.
     *
     * @return self
     */
    public function setSemanticItalic($semantic_italic)
    {
        if (is_null($semantic_italic)) {
            throw new \InvalidArgumentException('non-nullable semantic_italic cannot be null');
        }
        $allowedValues = $this->getSemanticItalicAllowableValues();
        if (!in_array($semantic_italic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'semantic_italic', must be one of '%s'",
                    $semantic_italic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['semantic_italic'] = $semantic_italic;

        return $this;
    }

    /**
     * Gets paragraph_spacing
     *
     * @return float|null
     */
    public function getParagraphSpacing()
    {
        return $this->container['paragraph_spacing'];
    }

    /**
     * Sets paragraph_spacing
     *
     * @param float|null $paragraph_spacing Space between paragraphs in px, 0 if not present.
     *
     * @return self
     */
    public function setParagraphSpacing($paragraph_spacing)
    {
        if (is_null($paragraph_spacing)) {
            throw new \InvalidArgumentException('non-nullable paragraph_spacing cannot be null');
        }
        $this->container['paragraph_spacing'] = $paragraph_spacing;

        return $this;
    }

    /**
     * Gets paragraph_indent
     *
     * @return float|null
     */
    public function getParagraphIndent()
    {
        return $this->container['paragraph_indent'];
    }

    /**
     * Sets paragraph_indent
     *
     * @param float|null $paragraph_indent Paragraph indentation in px, 0 if not present.
     *
     * @return self
     */
    public function setParagraphIndent($paragraph_indent)
    {
        if (is_null($paragraph_indent)) {
            throw new \InvalidArgumentException('non-nullable paragraph_indent cannot be null');
        }
        $this->container['paragraph_indent'] = $paragraph_indent;

        return $this;
    }

    /**
     * Gets list_spacing
     *
     * @return float|null
     */
    public function getListSpacing()
    {
        return $this->container['list_spacing'];
    }

    /**
     * Sets list_spacing
     *
     * @param float|null $list_spacing Space between list items in px, 0 if not present.
     *
     * @return self
     */
    public function setListSpacing($list_spacing)
    {
        if (is_null($list_spacing)) {
            throw new \InvalidArgumentException('non-nullable list_spacing cannot be null');
        }
        $this->container['list_spacing'] = $list_spacing;

        return $this;
    }

    /**
     * Gets text_decoration
     *
     * @return string|null
     */
    public function getTextDecoration()
    {
        return $this->container['text_decoration'];
    }

    /**
     * Sets text_decoration
     *
     * @param string|null $text_decoration Text decoration applied to the node, default is none.
     *
     * @return self
     */
    public function setTextDecoration($text_decoration)
    {
        if (is_null($text_decoration)) {
            throw new \InvalidArgumentException('non-nullable text_decoration cannot be null');
        }
        $allowedValues = $this->getTextDecorationAllowableValues();
        if (!in_array($text_decoration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_decoration', must be one of '%s'",
                    $text_decoration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_decoration'] = $text_decoration;

        return $this;
    }

    /**
     * Gets text_auto_resize
     *
     * @return string|null
     */
    public function getTextAutoResize()
    {
        return $this->container['text_auto_resize'];
    }

    /**
     * Sets text_auto_resize
     *
     * @param string|null $text_auto_resize Dimensions along which text will auto resize, default is that the text does not auto-resize. TRUNCATE means that the text will be shortened and trailing text will be replaced with \"…\" if the text contents is larger than the bounds. `TRUNCATE` as a return value is deprecated and will be removed in a future version. Read from `textTruncation` instead.
     *
     * @return self
     */
    public function setTextAutoResize($text_auto_resize)
    {
        if (is_null($text_auto_resize)) {
            throw new \InvalidArgumentException('non-nullable text_auto_resize cannot be null');
        }
        $allowedValues = $this->getTextAutoResizeAllowableValues();
        if (!in_array($text_auto_resize, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_auto_resize', must be one of '%s'",
                    $text_auto_resize,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_auto_resize'] = $text_auto_resize;

        return $this;
    }

    /**
     * Gets text_truncation
     *
     * @return string|null
     */
    public function getTextTruncation()
    {
        return $this->container['text_truncation'];
    }

    /**
     * Sets text_truncation
     *
     * @param string|null $text_truncation Whether this text node will truncate with an ellipsis when the text contents is larger than the text node.
     *
     * @return self
     */
    public function setTextTruncation($text_truncation)
    {
        if (is_null($text_truncation)) {
            throw new \InvalidArgumentException('non-nullable text_truncation cannot be null');
        }
        $allowedValues = $this->getTextTruncationAllowableValues();
        if (!in_array($text_truncation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_truncation', must be one of '%s'",
                    $text_truncation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_truncation'] = $text_truncation;

        return $this;
    }

    /**
     * Gets max_lines
     *
     * @return float|null
     */
    public function getMaxLines()
    {
        return $this->container['max_lines'];
    }

    /**
     * Sets max_lines
     *
     * @param float|null $max_lines When `textTruncation: \"ENDING\"` is set, `maxLines` determines how many lines a text node can grow to before it truncates.
     *
     * @return self
     */
    public function setMaxLines($max_lines)
    {
        if (is_null($max_lines)) {
            throw new \InvalidArgumentException('non-nullable max_lines cannot be null');
        }
        $this->container['max_lines'] = $max_lines;

        return $this;
    }

    /**
     * Gets line_height_px
     *
     * @return float|null
     */
    public function getLineHeightPx()
    {
        return $this->container['line_height_px'];
    }

    /**
     * Sets line_height_px
     *
     * @param float|null $line_height_px Line height in px.
     *
     * @return self
     */
    public function setLineHeightPx($line_height_px)
    {
        if (is_null($line_height_px)) {
            throw new \InvalidArgumentException('non-nullable line_height_px cannot be null');
        }
        $this->container['line_height_px'] = $line_height_px;

        return $this;
    }

    /**
     * Gets line_height_percent
     *
     * @return float|null
     */
    public function getLineHeightPercent()
    {
        return $this->container['line_height_percent'];
    }

    /**
     * Sets line_height_percent
     *
     * @param float|null $line_height_percent Line height as a percentage of normal line height. This is deprecated; in a future version of the API only lineHeightPx and lineHeightPercentFontSize will be returned.
     *
     * @return self
     */
    public function setLineHeightPercent($line_height_percent)
    {
        if (is_null($line_height_percent)) {
            throw new \InvalidArgumentException('non-nullable line_height_percent cannot be null');
        }
        $this->container['line_height_percent'] = $line_height_percent;

        return $this;
    }

    /**
     * Gets line_height_percent_font_size
     *
     * @return float|null
     */
    public function getLineHeightPercentFontSize()
    {
        return $this->container['line_height_percent_font_size'];
    }

    /**
     * Sets line_height_percent_font_size
     *
     * @param float|null $line_height_percent_font_size Line height as a percentage of the font size. Only returned when `lineHeightPercent` (deprecated) is not 100.
     *
     * @return self
     */
    public function setLineHeightPercentFontSize($line_height_percent_font_size)
    {
        if (is_null($line_height_percent_font_size)) {
            throw new \InvalidArgumentException('non-nullable line_height_percent_font_size cannot be null');
        }
        $this->container['line_height_percent_font_size'] = $line_height_percent_font_size;

        return $this;
    }

    /**
     * Gets line_height_unit
     *
     * @return string|null
     */
    public function getLineHeightUnit()
    {
        return $this->container['line_height_unit'];
    }

    /**
     * Sets line_height_unit
     *
     * @param string|null $line_height_unit The unit of the line height value specified by the user.
     *
     * @return self
     */
    public function setLineHeightUnit($line_height_unit)
    {
        if (is_null($line_height_unit)) {
            throw new \InvalidArgumentException('non-nullable line_height_unit cannot be null');
        }
        $allowedValues = $this->getLineHeightUnitAllowableValues();
        if (!in_array($line_height_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'line_height_unit', must be one of '%s'",
                    $line_height_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_height_unit'] = $line_height_unit;

        return $this;
    }

    /**
     * Gets is_override_over_text_style
     *
     * @return bool|null
     */
    public function getIsOverrideOverTextStyle()
    {
        return $this->container['is_override_over_text_style'];
    }

    /**
     * Sets is_override_over_text_style
     *
     * @param bool|null $is_override_over_text_style Whether or not this style has overrides over a text style. The possible fields to override are semanticWeight, semanticItalic, hyperlink, and textDecoration. If this is true, then those fields are overrides if present.
     *
     * @return self
     */
    public function setIsOverrideOverTextStyle($is_override_over_text_style)
    {
        if (is_null($is_override_over_text_style)) {
            throw new \InvalidArgumentException('non-nullable is_override_over_text_style cannot be null');
        }
        $this->container['is_override_over_text_style'] = $is_override_over_text_style;

        return $this;
    }

    /**
     * Gets bound_variables
     *
     * @return \OpenAPI\Client\Model\TypeStyleAllOfBoundVariables|null
     */
    public function getBoundVariables()
    {
        return $this->container['bound_variables'];
    }

    /**
     * Sets bound_variables
     *
     * @param \OpenAPI\Client\Model\TypeStyleAllOfBoundVariables|null $bound_variables bound_variables
     *
     * @return self
     */
    public function setBoundVariables($bound_variables)
    {
        if (is_null($bound_variables)) {
            throw new \InvalidArgumentException('non-nullable bound_variables cannot be null');
        }
        $this->container['bound_variables'] = $bound_variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


