<?php
/**
 * ShapeType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShapeType Class Doc Comment
 *
 * @category Class
 * @description Geometric shape type.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShapeType
{
    /**
     * Possible values of this enum
     */
    public const SQUARE = 'SQUARE';

    public const ELLIPSE = 'ELLIPSE';

    public const ROUNDED_RECTANGLE = 'ROUNDED_RECTANGLE';

    public const DIAMOND = 'DIAMOND';

    public const TRIANGLE_UP = 'TRIANGLE_UP';

    public const TRIANGLE_DOWN = 'TRIANGLE_DOWN';

    public const PARALLELOGRAM_RIGHT = 'PARALLELOGRAM_RIGHT';

    public const PARALLELOGRAM_LEFT = 'PARALLELOGRAM_LEFT';

    public const ENG_DATABASE = 'ENG_DATABASE';

    public const ENG_QUEUE = 'ENG_QUEUE';

    public const ENG_FILE = 'ENG_FILE';

    public const ENG_FOLDER = 'ENG_FOLDER';

    public const TRAPEZOID = 'TRAPEZOID';

    public const PREDEFINED_PROCESS = 'PREDEFINED_PROCESS';

    public const SHIELD = 'SHIELD';

    public const DOCUMENT_SINGLE = 'DOCUMENT_SINGLE';

    public const DOCUMENT_MULTIPLE = 'DOCUMENT_MULTIPLE';

    public const MANUAL_INPUT = 'MANUAL_INPUT';

    public const HEXAGON = 'HEXAGON';

    public const CHEVRON = 'CHEVRON';

    public const PENTAGON = 'PENTAGON';

    public const OCTAGON = 'OCTAGON';

    public const STAR = 'STAR';

    public const PLUS = 'PLUS';

    public const ARROW_LEFT = 'ARROW_LEFT';

    public const ARROW_RIGHT = 'ARROW_RIGHT';

    public const SUMMING_JUNCTION = 'SUMMING_JUNCTION';

    public const _OR = 'OR';

    public const SPEECH_BUBBLE = 'SPEECH_BUBBLE';

    public const INTERNAL_STORAGE = 'INTERNAL_STORAGE';

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::SQUARE,
            self::ELLIPSE,
            self::ROUNDED_RECTANGLE,
            self::DIAMOND,
            self::TRIANGLE_UP,
            self::TRIANGLE_DOWN,
            self::PARALLELOGRAM_RIGHT,
            self::PARALLELOGRAM_LEFT,
            self::ENG_DATABASE,
            self::ENG_QUEUE,
            self::ENG_FILE,
            self::ENG_FOLDER,
            self::TRAPEZOID,
            self::PREDEFINED_PROCESS,
            self::SHIELD,
            self::DOCUMENT_SINGLE,
            self::DOCUMENT_MULTIPLE,
            self::MANUAL_INPUT,
            self::HEXAGON,
            self::CHEVRON,
            self::PENTAGON,
            self::OCTAGON,
            self::STAR,
            self::PLUS,
            self::ARROW_LEFT,
            self::ARROW_RIGHT,
            self::SUMMING_JUNCTION,
            self::_OR,
            self::SPEECH_BUBBLE,
            self::INTERNAL_STORAGE
        ];
    }
}


