<?php
/**
 * Trigger
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Trigger Class Doc Comment
 *
 * @category Class
 * @description The &#x60;\&quot;ON_HOVER\&quot;&#x60; and &#x60;\&quot;ON_PRESS\&quot;&#x60; trigger types revert the navigation when the trigger is finished (the result is temporary).  &#x60;\&quot;MOUSE_ENTER\&quot;&#x60;, &#x60;\&quot;MOUSE_LEAVE\&quot;&#x60;, &#x60;\&quot;MOUSE_UP\&quot;&#x60; and &#x60;\&quot;MOUSE_DOWN\&quot;&#x60; are permanent, one-way navigation. The &#x60;delay&#x60; parameter requires the trigger to be held for a certain duration of time before the action occurs. Both &#x60;timeout&#x60; and &#x60;delay&#x60; values are in milliseconds. The &#x60;\&quot;ON_MEDIA_HIT\&quot;&#x60; and &#x60;\&quot;ON_MEDIA_END\&quot;&#x60; trigger types can only trigger from a video.  They fire when a video reaches a certain time or ends. The &#x60;timestamp&#x60; value is in seconds.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Trigger implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Trigger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'timeout' => 'float',
        'delay' => 'float',
        'deprecated_version' => 'bool',
        'device' => 'string',
        'key_codes' => 'float[]',
        'media_hit_time' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'timeout' => null,
        'delay' => null,
        'deprecated_version' => null,
        'device' => null,
        'key_codes' => null,
        'media_hit_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'timeout' => false,
        'delay' => false,
        'deprecated_version' => false,
        'device' => false,
        'key_codes' => false,
        'media_hit_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'timeout' => 'timeout',
        'delay' => 'delay',
        'deprecated_version' => 'deprecatedVersion',
        'device' => 'device',
        'key_codes' => 'keyCodes',
        'media_hit_time' => 'mediaHitTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'timeout' => 'setTimeout',
        'delay' => 'setDelay',
        'deprecated_version' => 'setDeprecatedVersion',
        'device' => 'setDevice',
        'key_codes' => 'setKeyCodes',
        'media_hit_time' => 'setMediaHitTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'timeout' => 'getTimeout',
        'delay' => 'getDelay',
        'deprecated_version' => 'getDeprecatedVersion',
        'device' => 'getDevice',
        'key_codes' => 'getKeyCodes',
        'media_hit_time' => 'getMediaHitTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ON_CLICK = 'ON_CLICK';
    public const TYPE_ON_HOVER = 'ON_HOVER';
    public const TYPE_ON_PRESS = 'ON_PRESS';
    public const TYPE_ON_DRAG = 'ON_DRAG';
    public const TYPE_AFTER_TIMEOUT = 'AFTER_TIMEOUT';
    public const TYPE_MOUSE_ENTER = 'MOUSE_ENTER';
    public const TYPE_MOUSE_LEAVE = 'MOUSE_LEAVE';
    public const TYPE_MOUSE_UP = 'MOUSE_UP';
    public const TYPE_MOUSE_DOWN = 'MOUSE_DOWN';
    public const TYPE_ON_KEY_DOWN = 'ON_KEY_DOWN';
    public const TYPE_ON_MEDIA_HIT = 'ON_MEDIA_HIT';
    public const TYPE_ON_MEDIA_END = 'ON_MEDIA_END';
    public const DEVICE_KEYBOARD = 'KEYBOARD';
    public const DEVICE_XBOX_ONE = 'XBOX_ONE';
    public const DEVICE_PS4 = 'PS4';
    public const DEVICE_SWITCH_PRO = 'SWITCH_PRO';
    public const DEVICE_UNKNOWN_CONTROLLER = 'UNKNOWN_CONTROLLER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ON_CLICK,
            self::TYPE_ON_HOVER,
            self::TYPE_ON_PRESS,
            self::TYPE_ON_DRAG,
            self::TYPE_AFTER_TIMEOUT,
            self::TYPE_MOUSE_ENTER,
            self::TYPE_MOUSE_LEAVE,
            self::TYPE_MOUSE_UP,
            self::TYPE_MOUSE_DOWN,
            self::TYPE_ON_KEY_DOWN,
            self::TYPE_ON_MEDIA_HIT,
            self::TYPE_ON_MEDIA_END,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceAllowableValues()
    {
        return [
            self::DEVICE_KEYBOARD,
            self::DEVICE_XBOX_ONE,
            self::DEVICE_PS4,
            self::DEVICE_SWITCH_PRO,
            self::DEVICE_UNKNOWN_CONTROLLER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('timeout', $data ?? [], null);
        $this->setIfExists('delay', $data ?? [], null);
        $this->setIfExists('deprecated_version', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('key_codes', $data ?? [], null);
        $this->setIfExists('media_hit_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timeout'] === null) {
            $invalidProperties[] = "'timeout' can't be null";
        }
        if ($this->container['delay'] === null) {
            $invalidProperties[] = "'delay' can't be null";
        }
        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        $allowedValues = $this->getDeviceAllowableValues();
        if (!is_null($this->container['device']) && !in_array($this->container['device'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device', must be one of '%s'",
                $this->container['device'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['key_codes'] === null) {
            $invalidProperties[] = "'key_codes' can't be null";
        }
        if ($this->container['media_hit_time'] === null) {
            $invalidProperties[] = "'media_hit_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return float
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param float $timeout timeout
     *
     * @return self
     */
    public function setTimeout($timeout)
    {
        if (is_null($timeout)) {
            throw new \InvalidArgumentException('non-nullable timeout cannot be null');
        }
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets delay
     *
     * @return float
     */
    public function getDelay()
    {
        return $this->container['delay'];
    }

    /**
     * Sets delay
     *
     * @param float $delay delay
     *
     * @return self
     */
    public function setDelay($delay)
    {
        if (is_null($delay)) {
            throw new \InvalidArgumentException('non-nullable delay cannot be null');
        }
        $this->container['delay'] = $delay;

        return $this;
    }

    /**
     * Gets deprecated_version
     *
     * @return bool|null
     */
    public function getDeprecatedVersion()
    {
        return $this->container['deprecated_version'];
    }

    /**
     * Sets deprecated_version
     *
     * @param bool|null $deprecated_version Whether this is a [deprecated version](https://help.figma.com/hc/en-us/articles/360040035834-Prototype-triggers#h_01HHN04REHJNP168R26P1CMP0A) of the trigger that was left unchanged for backwards compatibility. If not present, the trigger is the latest version.
     *
     * @return self
     */
    public function setDeprecatedVersion($deprecated_version)
    {
        if (is_null($deprecated_version)) {
            throw new \InvalidArgumentException('non-nullable deprecated_version cannot be null');
        }
        $this->container['deprecated_version'] = $deprecated_version;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $allowedValues = $this->getDeviceAllowableValues();
        if (!in_array($device, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device', must be one of '%s'",
                    $device,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets key_codes
     *
     * @return float[]
     */
    public function getKeyCodes()
    {
        return $this->container['key_codes'];
    }

    /**
     * Sets key_codes
     *
     * @param float[] $key_codes key_codes
     *
     * @return self
     */
    public function setKeyCodes($key_codes)
    {
        if (is_null($key_codes)) {
            throw new \InvalidArgumentException('non-nullable key_codes cannot be null');
        }
        $this->container['key_codes'] = $key_codes;

        return $this;
    }

    /**
     * Gets media_hit_time
     *
     * @return float
     */
    public function getMediaHitTime()
    {
        return $this->container['media_hit_time'];
    }

    /**
     * Sets media_hit_time
     *
     * @param float $media_hit_time media_hit_time
     *
     * @return self
     */
    public function setMediaHitTime($media_hit_time)
    {
        if (is_null($media_hit_time)) {
            throw new \InvalidArgumentException('non-nullable media_hit_time cannot be null');
        }
        $this->container['media_hit_time'] = $media_hit_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


