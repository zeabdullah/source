<?php
/**
 * HasGeometryTrait
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HasGeometryTrait Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HasGeometryTrait implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HasGeometryTrait';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fills' => '\OpenAPI\Client\Model\Paint[]',
        'styles' => 'array<string,string>',
        'strokes' => '\OpenAPI\Client\Model\Paint[]',
        'stroke_weight' => 'float',
        'stroke_align' => 'string',
        'stroke_join' => 'string',
        'stroke_dashes' => 'float[]',
        'fill_override_table' => 'array<string,\OpenAPI\Client\Model\HasGeometryTraitAllOfFillOverrideTable>',
        'fill_geometry' => '\OpenAPI\Client\Model\Path[]',
        'stroke_geometry' => '\OpenAPI\Client\Model\Path[]',
        'stroke_cap' => 'string',
        'stroke_miter_angle' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fills' => null,
        'styles' => null,
        'strokes' => null,
        'stroke_weight' => null,
        'stroke_align' => null,
        'stroke_join' => null,
        'stroke_dashes' => null,
        'fill_override_table' => null,
        'fill_geometry' => null,
        'stroke_geometry' => null,
        'stroke_cap' => null,
        'stroke_miter_angle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fills' => false,
        'styles' => false,
        'strokes' => false,
        'stroke_weight' => false,
        'stroke_align' => false,
        'stroke_join' => false,
        'stroke_dashes' => false,
        'fill_override_table' => false,
        'fill_geometry' => false,
        'stroke_geometry' => false,
        'stroke_cap' => false,
        'stroke_miter_angle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fills' => 'fills',
        'styles' => 'styles',
        'strokes' => 'strokes',
        'stroke_weight' => 'strokeWeight',
        'stroke_align' => 'strokeAlign',
        'stroke_join' => 'strokeJoin',
        'stroke_dashes' => 'strokeDashes',
        'fill_override_table' => 'fillOverrideTable',
        'fill_geometry' => 'fillGeometry',
        'stroke_geometry' => 'strokeGeometry',
        'stroke_cap' => 'strokeCap',
        'stroke_miter_angle' => 'strokeMiterAngle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fills' => 'setFills',
        'styles' => 'setStyles',
        'strokes' => 'setStrokes',
        'stroke_weight' => 'setStrokeWeight',
        'stroke_align' => 'setStrokeAlign',
        'stroke_join' => 'setStrokeJoin',
        'stroke_dashes' => 'setStrokeDashes',
        'fill_override_table' => 'setFillOverrideTable',
        'fill_geometry' => 'setFillGeometry',
        'stroke_geometry' => 'setStrokeGeometry',
        'stroke_cap' => 'setStrokeCap',
        'stroke_miter_angle' => 'setStrokeMiterAngle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fills' => 'getFills',
        'styles' => 'getStyles',
        'strokes' => 'getStrokes',
        'stroke_weight' => 'getStrokeWeight',
        'stroke_align' => 'getStrokeAlign',
        'stroke_join' => 'getStrokeJoin',
        'stroke_dashes' => 'getStrokeDashes',
        'fill_override_table' => 'getFillOverrideTable',
        'fill_geometry' => 'getFillGeometry',
        'stroke_geometry' => 'getStrokeGeometry',
        'stroke_cap' => 'getStrokeCap',
        'stroke_miter_angle' => 'getStrokeMiterAngle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STROKE_ALIGN_INSIDE = 'INSIDE';
    public const STROKE_ALIGN_OUTSIDE = 'OUTSIDE';
    public const STROKE_ALIGN_CENTER = 'CENTER';
    public const STROKE_JOIN_MITER = 'MITER';
    public const STROKE_JOIN_BEVEL = 'BEVEL';
    public const STROKE_JOIN_ROUND = 'ROUND';
    public const STROKE_CAP_NONE = 'NONE';
    public const STROKE_CAP_ROUND = 'ROUND';
    public const STROKE_CAP_SQUARE = 'SQUARE';
    public const STROKE_CAP_LINE_ARROW = 'LINE_ARROW';
    public const STROKE_CAP_TRIANGLE_ARROW = 'TRIANGLE_ARROW';
    public const STROKE_CAP_DIAMOND_FILLED = 'DIAMOND_FILLED';
    public const STROKE_CAP_CIRCLE_FILLED = 'CIRCLE_FILLED';
    public const STROKE_CAP_TRIANGLE_FILLED = 'TRIANGLE_FILLED';
    public const STROKE_CAP_WASHI_TAPE_1 = 'WASHI_TAPE_1';
    public const STROKE_CAP_WASHI_TAPE_2 = 'WASHI_TAPE_2';
    public const STROKE_CAP_WASHI_TAPE_3 = 'WASHI_TAPE_3';
    public const STROKE_CAP_WASHI_TAPE_4 = 'WASHI_TAPE_4';
    public const STROKE_CAP_WASHI_TAPE_5 = 'WASHI_TAPE_5';
    public const STROKE_CAP_WASHI_TAPE_6 = 'WASHI_TAPE_6';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrokeAlignAllowableValues()
    {
        return [
            self::STROKE_ALIGN_INSIDE,
            self::STROKE_ALIGN_OUTSIDE,
            self::STROKE_ALIGN_CENTER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrokeJoinAllowableValues()
    {
        return [
            self::STROKE_JOIN_MITER,
            self::STROKE_JOIN_BEVEL,
            self::STROKE_JOIN_ROUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrokeCapAllowableValues()
    {
        return [
            self::STROKE_CAP_NONE,
            self::STROKE_CAP_ROUND,
            self::STROKE_CAP_SQUARE,
            self::STROKE_CAP_LINE_ARROW,
            self::STROKE_CAP_TRIANGLE_ARROW,
            self::STROKE_CAP_DIAMOND_FILLED,
            self::STROKE_CAP_CIRCLE_FILLED,
            self::STROKE_CAP_TRIANGLE_FILLED,
            self::STROKE_CAP_WASHI_TAPE_1,
            self::STROKE_CAP_WASHI_TAPE_2,
            self::STROKE_CAP_WASHI_TAPE_3,
            self::STROKE_CAP_WASHI_TAPE_4,
            self::STROKE_CAP_WASHI_TAPE_5,
            self::STROKE_CAP_WASHI_TAPE_6,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('fills', $data ?? [], null);
        $this->setIfExists('styles', $data ?? [], null);
        $this->setIfExists('strokes', $data ?? [], null);
        $this->setIfExists('stroke_weight', $data ?? [], 1);
        $this->setIfExists('stroke_align', $data ?? [], null);
        $this->setIfExists('stroke_join', $data ?? [], 'MITER');
        $this->setIfExists('stroke_dashes', $data ?? [], null);
        $this->setIfExists('fill_override_table', $data ?? [], null);
        $this->setIfExists('fill_geometry', $data ?? [], null);
        $this->setIfExists('stroke_geometry', $data ?? [], null);
        $this->setIfExists('stroke_cap', $data ?? [], 'NONE');
        $this->setIfExists('stroke_miter_angle', $data ?? [], 28.96);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fills'] === null) {
            $invalidProperties[] = "'fills' can't be null";
        }
        $allowedValues = $this->getStrokeAlignAllowableValues();
        if (!is_null($this->container['stroke_align']) && !in_array($this->container['stroke_align'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stroke_align', must be one of '%s'",
                $this->container['stroke_align'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrokeJoinAllowableValues();
        if (!is_null($this->container['stroke_join']) && !in_array($this->container['stroke_join'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stroke_join', must be one of '%s'",
                $this->container['stroke_join'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrokeCapAllowableValues();
        if (!is_null($this->container['stroke_cap']) && !in_array($this->container['stroke_cap'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stroke_cap', must be one of '%s'",
                $this->container['stroke_cap'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fills
     *
     * @return \OpenAPI\Client\Model\Paint[]
     */
    public function getFills()
    {
        return $this->container['fills'];
    }

    /**
     * Sets fills
     *
     * @param \OpenAPI\Client\Model\Paint[] $fills An array of fill paints applied to the node.
     *
     * @return self
     */
    public function setFills($fills)
    {
        if (is_null($fills)) {
            throw new \InvalidArgumentException('non-nullable fills cannot be null');
        }
        $this->container['fills'] = $fills;

        return $this;
    }

    /**
     * Gets styles
     *
     * @return array<string,string>|null
     */
    public function getStyles()
    {
        return $this->container['styles'];
    }

    /**
     * Sets styles
     *
     * @param array<string,string>|null $styles A mapping of a StyleType to style ID (see Style) of styles present on this node. The style ID can be used to look up more information about the style in the top-level styles field.
     *
     * @return self
     */
    public function setStyles($styles)
    {
        if (is_null($styles)) {
            throw new \InvalidArgumentException('non-nullable styles cannot be null');
        }
        $this->container['styles'] = $styles;

        return $this;
    }

    /**
     * Gets strokes
     *
     * @return \OpenAPI\Client\Model\Paint[]|null
     */
    public function getStrokes()
    {
        return $this->container['strokes'];
    }

    /**
     * Sets strokes
     *
     * @param \OpenAPI\Client\Model\Paint[]|null $strokes An array of stroke paints applied to the node.
     *
     * @return self
     */
    public function setStrokes($strokes)
    {
        if (is_null($strokes)) {
            throw new \InvalidArgumentException('non-nullable strokes cannot be null');
        }
        $this->container['strokes'] = $strokes;

        return $this;
    }

    /**
     * Gets stroke_weight
     *
     * @return float|null
     */
    public function getStrokeWeight()
    {
        return $this->container['stroke_weight'];
    }

    /**
     * Sets stroke_weight
     *
     * @param float|null $stroke_weight The weight of strokes on the node.
     *
     * @return self
     */
    public function setStrokeWeight($stroke_weight)
    {
        if (is_null($stroke_weight)) {
            throw new \InvalidArgumentException('non-nullable stroke_weight cannot be null');
        }
        $this->container['stroke_weight'] = $stroke_weight;

        return $this;
    }

    /**
     * Gets stroke_align
     *
     * @return string|null
     */
    public function getStrokeAlign()
    {
        return $this->container['stroke_align'];
    }

    /**
     * Sets stroke_align
     *
     * @param string|null $stroke_align Position of stroke relative to vector outline, as a string enum  - `INSIDE`: stroke drawn inside the shape boundary - `OUTSIDE`: stroke drawn outside the shape boundary - `CENTER`: stroke drawn centered along the shape boundary
     *
     * @return self
     */
    public function setStrokeAlign($stroke_align)
    {
        if (is_null($stroke_align)) {
            throw new \InvalidArgumentException('non-nullable stroke_align cannot be null');
        }
        $allowedValues = $this->getStrokeAlignAllowableValues();
        if (!in_array($stroke_align, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stroke_align', must be one of '%s'",
                    $stroke_align,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stroke_align'] = $stroke_align;

        return $this;
    }

    /**
     * Gets stroke_join
     *
     * @return string|null
     */
    public function getStrokeJoin()
    {
        return $this->container['stroke_join'];
    }

    /**
     * Sets stroke_join
     *
     * @param string|null $stroke_join A string enum with value of \"MITER\", \"BEVEL\", or \"ROUND\", describing how corners in vector paths are rendered.
     *
     * @return self
     */
    public function setStrokeJoin($stroke_join)
    {
        if (is_null($stroke_join)) {
            throw new \InvalidArgumentException('non-nullable stroke_join cannot be null');
        }
        $allowedValues = $this->getStrokeJoinAllowableValues();
        if (!in_array($stroke_join, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stroke_join', must be one of '%s'",
                    $stroke_join,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stroke_join'] = $stroke_join;

        return $this;
    }

    /**
     * Gets stroke_dashes
     *
     * @return float[]|null
     */
    public function getStrokeDashes()
    {
        return $this->container['stroke_dashes'];
    }

    /**
     * Sets stroke_dashes
     *
     * @param float[]|null $stroke_dashes An array of floating point numbers describing the pattern of dash length and gap lengths that the vector stroke will use when drawn.  For example a value of [1, 2] indicates that the stroke will be drawn with a dash of length 1 followed by a gap of length 2, repeated.
     *
     * @return self
     */
    public function setStrokeDashes($stroke_dashes)
    {
        if (is_null($stroke_dashes)) {
            throw new \InvalidArgumentException('non-nullable stroke_dashes cannot be null');
        }
        $this->container['stroke_dashes'] = $stroke_dashes;

        return $this;
    }

    /**
     * Gets fill_override_table
     *
     * @return array<string,\OpenAPI\Client\Model\HasGeometryTraitAllOfFillOverrideTable>|null
     */
    public function getFillOverrideTable()
    {
        return $this->container['fill_override_table'];
    }

    /**
     * Sets fill_override_table
     *
     * @param array<string,\OpenAPI\Client\Model\HasGeometryTraitAllOfFillOverrideTable>|null $fill_override_table Map from ID to PaintOverride for looking up fill overrides. To see which regions are overriden, you must use the `geometry=paths` option. Each path returned may have an `overrideID` which maps to this table.
     *
     * @return self
     */
    public function setFillOverrideTable($fill_override_table)
    {
        if (is_null($fill_override_table)) {
            throw new \InvalidArgumentException('non-nullable fill_override_table cannot be null');
        }
        $this->container['fill_override_table'] = $fill_override_table;

        return $this;
    }

    /**
     * Gets fill_geometry
     *
     * @return \OpenAPI\Client\Model\Path[]|null
     */
    public function getFillGeometry()
    {
        return $this->container['fill_geometry'];
    }

    /**
     * Sets fill_geometry
     *
     * @param \OpenAPI\Client\Model\Path[]|null $fill_geometry Only specified if parameter `geometry=paths` is used. An array of paths representing the object fill.
     *
     * @return self
     */
    public function setFillGeometry($fill_geometry)
    {
        if (is_null($fill_geometry)) {
            throw new \InvalidArgumentException('non-nullable fill_geometry cannot be null');
        }
        $this->container['fill_geometry'] = $fill_geometry;

        return $this;
    }

    /**
     * Gets stroke_geometry
     *
     * @return \OpenAPI\Client\Model\Path[]|null
     */
    public function getStrokeGeometry()
    {
        return $this->container['stroke_geometry'];
    }

    /**
     * Sets stroke_geometry
     *
     * @param \OpenAPI\Client\Model\Path[]|null $stroke_geometry Only specified if parameter `geometry=paths` is used. An array of paths representing the object stroke.
     *
     * @return self
     */
    public function setStrokeGeometry($stroke_geometry)
    {
        if (is_null($stroke_geometry)) {
            throw new \InvalidArgumentException('non-nullable stroke_geometry cannot be null');
        }
        $this->container['stroke_geometry'] = $stroke_geometry;

        return $this;
    }

    /**
     * Gets stroke_cap
     *
     * @return string|null
     */
    public function getStrokeCap()
    {
        return $this->container['stroke_cap'];
    }

    /**
     * Sets stroke_cap
     *
     * @param string|null $stroke_cap A string enum describing the end caps of vector paths.
     *
     * @return self
     */
    public function setStrokeCap($stroke_cap)
    {
        if (is_null($stroke_cap)) {
            throw new \InvalidArgumentException('non-nullable stroke_cap cannot be null');
        }
        $allowedValues = $this->getStrokeCapAllowableValues();
        if (!in_array($stroke_cap, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stroke_cap', must be one of '%s'",
                    $stroke_cap,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stroke_cap'] = $stroke_cap;

        return $this;
    }

    /**
     * Gets stroke_miter_angle
     *
     * @return float|null
     */
    public function getStrokeMiterAngle()
    {
        return $this->container['stroke_miter_angle'];
    }

    /**
     * Sets stroke_miter_angle
     *
     * @param float|null $stroke_miter_angle Only valid if `strokeJoin` is \"MITER\". The corner angle, in degrees, below which `strokeJoin` will be set to \"BEVEL\" to avoid super sharp corners. By default this is 28.96 degrees.
     *
     * @return self
     */
    public function setStrokeMiterAngle($stroke_miter_angle)
    {
        if (is_null($stroke_miter_angle)) {
            throw new \InvalidArgumentException('non-nullable stroke_miter_angle cannot be null');
        }
        $this->container['stroke_miter_angle'] = $stroke_miter_angle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


