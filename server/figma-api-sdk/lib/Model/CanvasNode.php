<?php
/**
 * CanvasNode
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CanvasNode Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CanvasNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CanvasNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'visible' => 'bool',
        'locked' => 'bool',
        'is_fixed' => 'bool',
        'scroll_behavior' => 'string',
        'rotation' => 'float',
        'component_property_references' => 'array<string,string>',
        'plugin_data' => 'mixed',
        'shared_plugin_data' => 'mixed',
        'bound_variables' => '\OpenAPI\Client\Model\IsLayerTraitBoundVariables',
        'explicit_variable_modes' => 'array<string,string>',
        'export_settings' => '\OpenAPI\Client\Model\ExportSetting[]',
        'children' => '\OpenAPI\Client\Model\SubcanvasNode[]',
        'background_color' => '\OpenAPI\Client\Model\RGBA',
        'prototype_start_node_id' => 'string',
        'flow_starting_points' => '\OpenAPI\Client\Model\FlowStartingPoint[]',
        'prototype_device' => '\OpenAPI\Client\Model\PrototypeDevice',
        'prototype_backgrounds' => '\OpenAPI\Client\Model\RGBA[]',
        'measurements' => '\OpenAPI\Client\Model\Measurement[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'visible' => null,
        'locked' => null,
        'is_fixed' => null,
        'scroll_behavior' => null,
        'rotation' => null,
        'component_property_references' => null,
        'plugin_data' => null,
        'shared_plugin_data' => null,
        'bound_variables' => null,
        'explicit_variable_modes' => null,
        'export_settings' => null,
        'children' => null,
        'background_color' => null,
        'prototype_start_node_id' => null,
        'flow_starting_points' => null,
        'prototype_device' => null,
        'prototype_backgrounds' => null,
        'measurements' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'type' => false,
        'visible' => false,
        'locked' => false,
        'is_fixed' => false,
        'scroll_behavior' => false,
        'rotation' => false,
        'component_property_references' => false,
        'plugin_data' => true,
        'shared_plugin_data' => true,
        'bound_variables' => false,
        'explicit_variable_modes' => false,
        'export_settings' => false,
        'children' => false,
        'background_color' => false,
        'prototype_start_node_id' => true,
        'flow_starting_points' => false,
        'prototype_device' => false,
        'prototype_backgrounds' => false,
        'measurements' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'visible' => 'visible',
        'locked' => 'locked',
        'is_fixed' => 'isFixed',
        'scroll_behavior' => 'scrollBehavior',
        'rotation' => 'rotation',
        'component_property_references' => 'componentPropertyReferences',
        'plugin_data' => 'pluginData',
        'shared_plugin_data' => 'sharedPluginData',
        'bound_variables' => 'boundVariables',
        'explicit_variable_modes' => 'explicitVariableModes',
        'export_settings' => 'exportSettings',
        'children' => 'children',
        'background_color' => 'backgroundColor',
        'prototype_start_node_id' => 'prototypeStartNodeID',
        'flow_starting_points' => 'flowStartingPoints',
        'prototype_device' => 'prototypeDevice',
        'prototype_backgrounds' => 'prototypeBackgrounds',
        'measurements' => 'measurements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'visible' => 'setVisible',
        'locked' => 'setLocked',
        'is_fixed' => 'setIsFixed',
        'scroll_behavior' => 'setScrollBehavior',
        'rotation' => 'setRotation',
        'component_property_references' => 'setComponentPropertyReferences',
        'plugin_data' => 'setPluginData',
        'shared_plugin_data' => 'setSharedPluginData',
        'bound_variables' => 'setBoundVariables',
        'explicit_variable_modes' => 'setExplicitVariableModes',
        'export_settings' => 'setExportSettings',
        'children' => 'setChildren',
        'background_color' => 'setBackgroundColor',
        'prototype_start_node_id' => 'setPrototypeStartNodeId',
        'flow_starting_points' => 'setFlowStartingPoints',
        'prototype_device' => 'setPrototypeDevice',
        'prototype_backgrounds' => 'setPrototypeBackgrounds',
        'measurements' => 'setMeasurements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'visible' => 'getVisible',
        'locked' => 'getLocked',
        'is_fixed' => 'getIsFixed',
        'scroll_behavior' => 'getScrollBehavior',
        'rotation' => 'getRotation',
        'component_property_references' => 'getComponentPropertyReferences',
        'plugin_data' => 'getPluginData',
        'shared_plugin_data' => 'getSharedPluginData',
        'bound_variables' => 'getBoundVariables',
        'explicit_variable_modes' => 'getExplicitVariableModes',
        'export_settings' => 'getExportSettings',
        'children' => 'getChildren',
        'background_color' => 'getBackgroundColor',
        'prototype_start_node_id' => 'getPrototypeStartNodeId',
        'flow_starting_points' => 'getFlowStartingPoints',
        'prototype_device' => 'getPrototypeDevice',
        'prototype_backgrounds' => 'getPrototypeBackgrounds',
        'measurements' => 'getMeasurements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CANVAS = 'CANVAS';
    public const SCROLL_BEHAVIOR_SCROLLS = 'SCROLLS';
    public const SCROLL_BEHAVIOR_FIXED = 'FIXED';
    public const SCROLL_BEHAVIOR_STICKY_SCROLLS = 'STICKY_SCROLLS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CANVAS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScrollBehaviorAllowableValues()
    {
        return [
            self::SCROLL_BEHAVIOR_SCROLLS,
            self::SCROLL_BEHAVIOR_FIXED,
            self::SCROLL_BEHAVIOR_STICKY_SCROLLS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], true);
        $this->setIfExists('locked', $data ?? [], false);
        $this->setIfExists('is_fixed', $data ?? [], false);
        $this->setIfExists('scroll_behavior', $data ?? [], 'SCROLLS');
        $this->setIfExists('rotation', $data ?? [], 0);
        $this->setIfExists('component_property_references', $data ?? [], null);
        $this->setIfExists('plugin_data', $data ?? [], null);
        $this->setIfExists('shared_plugin_data', $data ?? [], null);
        $this->setIfExists('bound_variables', $data ?? [], null);
        $this->setIfExists('explicit_variable_modes', $data ?? [], null);
        $this->setIfExists('export_settings', $data ?? [], null);
        $this->setIfExists('children', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('prototype_start_node_id', $data ?? [], null);
        $this->setIfExists('flow_starting_points', $data ?? [], null);
        $this->setIfExists('prototype_device', $data ?? [], null);
        $this->setIfExists('prototype_backgrounds', $data ?? [], null);
        $this->setIfExists('measurements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['scroll_behavior'] === null) {
            $invalidProperties[] = "'scroll_behavior' can't be null";
        }
        $allowedValues = $this->getScrollBehaviorAllowableValues();
        if (!is_null($this->container['scroll_behavior']) && !in_array($this->container['scroll_behavior'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scroll_behavior', must be one of '%s'",
                $this->container['scroll_behavior'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['children'] === null) {
            $invalidProperties[] = "'children' can't be null";
        }
        if ($this->container['background_color'] === null) {
            $invalidProperties[] = "'background_color' can't be null";
        }
        if ($this->container['prototype_start_node_id'] === null) {
            $invalidProperties[] = "'prototype_start_node_id' can't be null";
        }
        if ($this->container['flow_starting_points'] === null) {
            $invalidProperties[] = "'flow_starting_points' can't be null";
        }
        if ($this->container['prototype_device'] === null) {
            $invalidProperties[] = "'prototype_device' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A string uniquely identifying this node within the document.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name given to the node by the user in the tool.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible Whether or not the node is visible on the canvas.
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool|null $locked If true, layer is locked and cannot be edited
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets is_fixed
     *
     * @return bool|null
     * @deprecated
     */
    public function getIsFixed()
    {
        return $this->container['is_fixed'];
    }

    /**
     * Sets is_fixed
     *
     * @param bool|null $is_fixed Whether the layer is fixed while the parent is scrolling
     *
     * @return self
     * @deprecated
     */
    public function setIsFixed($is_fixed)
    {
        if (is_null($is_fixed)) {
            throw new \InvalidArgumentException('non-nullable is_fixed cannot be null');
        }
        $this->container['is_fixed'] = $is_fixed;

        return $this;
    }

    /**
     * Gets scroll_behavior
     *
     * @return string
     */
    public function getScrollBehavior()
    {
        return $this->container['scroll_behavior'];
    }

    /**
     * Sets scroll_behavior
     *
     * @param string $scroll_behavior How layer should be treated when the frame is resized
     *
     * @return self
     */
    public function setScrollBehavior($scroll_behavior)
    {
        if (is_null($scroll_behavior)) {
            throw new \InvalidArgumentException('non-nullable scroll_behavior cannot be null');
        }
        $allowedValues = $this->getScrollBehaviorAllowableValues();
        if (!in_array($scroll_behavior, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scroll_behavior', must be one of '%s'",
                    $scroll_behavior,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scroll_behavior'] = $scroll_behavior;

        return $this;
    }

    /**
     * Gets rotation
     *
     * @return float|null
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     *
     * @param float|null $rotation The rotation of the node, if not 0.
     *
     * @return self
     */
    public function setRotation($rotation)
    {
        if (is_null($rotation)) {
            throw new \InvalidArgumentException('non-nullable rotation cannot be null');
        }
        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets component_property_references
     *
     * @return array<string,string>|null
     */
    public function getComponentPropertyReferences()
    {
        return $this->container['component_property_references'];
    }

    /**
     * Sets component_property_references
     *
     * @param array<string,string>|null $component_property_references A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
     *
     * @return self
     */
    public function setComponentPropertyReferences($component_property_references)
    {
        if (is_null($component_property_references)) {
            throw new \InvalidArgumentException('non-nullable component_property_references cannot be null');
        }
        $this->container['component_property_references'] = $component_property_references;

        return $this;
    }

    /**
     * Gets plugin_data
     *
     * @return mixed|null
     */
    public function getPluginData()
    {
        return $this->container['plugin_data'];
    }

    /**
     * Sets plugin_data
     *
     * @param mixed|null $plugin_data plugin_data
     *
     * @return self
     */
    public function setPluginData($plugin_data)
    {
        if (is_null($plugin_data)) {
            array_push($this->openAPINullablesSetToNull, 'plugin_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plugin_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plugin_data'] = $plugin_data;

        return $this;
    }

    /**
     * Gets shared_plugin_data
     *
     * @return mixed|null
     */
    public function getSharedPluginData()
    {
        return $this->container['shared_plugin_data'];
    }

    /**
     * Sets shared_plugin_data
     *
     * @param mixed|null $shared_plugin_data shared_plugin_data
     *
     * @return self
     */
    public function setSharedPluginData($shared_plugin_data)
    {
        if (is_null($shared_plugin_data)) {
            array_push($this->openAPINullablesSetToNull, 'shared_plugin_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shared_plugin_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shared_plugin_data'] = $shared_plugin_data;

        return $this;
    }

    /**
     * Gets bound_variables
     *
     * @return \OpenAPI\Client\Model\IsLayerTraitBoundVariables|null
     */
    public function getBoundVariables()
    {
        return $this->container['bound_variables'];
    }

    /**
     * Sets bound_variables
     *
     * @param \OpenAPI\Client\Model\IsLayerTraitBoundVariables|null $bound_variables bound_variables
     *
     * @return self
     */
    public function setBoundVariables($bound_variables)
    {
        if (is_null($bound_variables)) {
            throw new \InvalidArgumentException('non-nullable bound_variables cannot be null');
        }
        $this->container['bound_variables'] = $bound_variables;

        return $this;
    }

    /**
     * Gets explicit_variable_modes
     *
     * @return array<string,string>|null
     */
    public function getExplicitVariableModes()
    {
        return $this->container['explicit_variable_modes'];
    }

    /**
     * Sets explicit_variable_modes
     *
     * @param array<string,string>|null $explicit_variable_modes A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
     *
     * @return self
     */
    public function setExplicitVariableModes($explicit_variable_modes)
    {
        if (is_null($explicit_variable_modes)) {
            throw new \InvalidArgumentException('non-nullable explicit_variable_modes cannot be null');
        }
        $this->container['explicit_variable_modes'] = $explicit_variable_modes;

        return $this;
    }

    /**
     * Gets export_settings
     *
     * @return \OpenAPI\Client\Model\ExportSetting[]|null
     */
    public function getExportSettings()
    {
        return $this->container['export_settings'];
    }

    /**
     * Sets export_settings
     *
     * @param \OpenAPI\Client\Model\ExportSetting[]|null $export_settings An array of export settings representing images to export from the node.
     *
     * @return self
     */
    public function setExportSettings($export_settings)
    {
        if (is_null($export_settings)) {
            throw new \InvalidArgumentException('non-nullable export_settings cannot be null');
        }
        $this->container['export_settings'] = $export_settings;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \OpenAPI\Client\Model\SubcanvasNode[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \OpenAPI\Client\Model\SubcanvasNode[] $children children
     *
     * @return self
     */
    public function setChildren($children)
    {
        if (is_null($children)) {
            throw new \InvalidArgumentException('non-nullable children cannot be null');
        }
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return \OpenAPI\Client\Model\RGBA
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param \OpenAPI\Client\Model\RGBA $background_color Background color of the canvas.
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            throw new \InvalidArgumentException('non-nullable background_color cannot be null');
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets prototype_start_node_id
     *
     * @return string
     * @deprecated
     */
    public function getPrototypeStartNodeId()
    {
        return $this->container['prototype_start_node_id'];
    }

    /**
     * Sets prototype_start_node_id
     *
     * @param string $prototype_start_node_id Node ID that corresponds to the start frame for prototypes. This is deprecated with the introduction of multiple flows. Please use the `flowStartingPoints` field.
     *
     * @return self
     * @deprecated
     */
    public function setPrototypeStartNodeId($prototype_start_node_id)
    {
        if (is_null($prototype_start_node_id)) {
            array_push($this->openAPINullablesSetToNull, 'prototype_start_node_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prototype_start_node_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prototype_start_node_id'] = $prototype_start_node_id;

        return $this;
    }

    /**
     * Gets flow_starting_points
     *
     * @return \OpenAPI\Client\Model\FlowStartingPoint[]
     */
    public function getFlowStartingPoints()
    {
        return $this->container['flow_starting_points'];
    }

    /**
     * Sets flow_starting_points
     *
     * @param \OpenAPI\Client\Model\FlowStartingPoint[] $flow_starting_points An array of flow starting points sorted by its position in the prototype settings panel.
     *
     * @return self
     */
    public function setFlowStartingPoints($flow_starting_points)
    {
        if (is_null($flow_starting_points)) {
            throw new \InvalidArgumentException('non-nullable flow_starting_points cannot be null');
        }
        $this->container['flow_starting_points'] = $flow_starting_points;

        return $this;
    }

    /**
     * Gets prototype_device
     *
     * @return \OpenAPI\Client\Model\PrototypeDevice
     */
    public function getPrototypeDevice()
    {
        return $this->container['prototype_device'];
    }

    /**
     * Sets prototype_device
     *
     * @param \OpenAPI\Client\Model\PrototypeDevice $prototype_device The device used to view a prototype.
     *
     * @return self
     */
    public function setPrototypeDevice($prototype_device)
    {
        if (is_null($prototype_device)) {
            throw new \InvalidArgumentException('non-nullable prototype_device cannot be null');
        }
        $this->container['prototype_device'] = $prototype_device;

        return $this;
    }

    /**
     * Gets prototype_backgrounds
     *
     * @return \OpenAPI\Client\Model\RGBA[]|null
     */
    public function getPrototypeBackgrounds()
    {
        return $this->container['prototype_backgrounds'];
    }

    /**
     * Sets prototype_backgrounds
     *
     * @param \OpenAPI\Client\Model\RGBA[]|null $prototype_backgrounds The background color of the prototype (currently only supports a single solid color paint).
     *
     * @return self
     */
    public function setPrototypeBackgrounds($prototype_backgrounds)
    {
        if (is_null($prototype_backgrounds)) {
            throw new \InvalidArgumentException('non-nullable prototype_backgrounds cannot be null');
        }
        $this->container['prototype_backgrounds'] = $prototype_backgrounds;

        return $this;
    }

    /**
     * Gets measurements
     *
     * @return \OpenAPI\Client\Model\Measurement[]|null
     */
    public function getMeasurements()
    {
        return $this->container['measurements'];
    }

    /**
     * Sets measurements
     *
     * @param \OpenAPI\Client\Model\Measurement[]|null $measurements measurements
     *
     * @return self
     */
    public function setMeasurements($measurements)
    {
        if (is_null($measurements)) {
            throw new \InvalidArgumentException('non-nullable measurements cannot be null');
        }
        $this->container['measurements'] = $measurements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


