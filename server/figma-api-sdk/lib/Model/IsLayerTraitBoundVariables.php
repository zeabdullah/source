<?php
/**
 * IsLayerTraitBoundVariables
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IsLayerTraitBoundVariables Class Doc Comment
 *
 * @category Class
 * @description A mapping of field to the variables applied to this field. Most fields will only map to a single &#x60;VariableAlias&#x60;. However, for properties like &#x60;fills&#x60;, &#x60;strokes&#x60;, &#x60;size&#x60;, &#x60;componentProperties&#x60;, and &#x60;textRangeFills&#x60;, it is possible to have multiple variables bound to the field.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IsLayerTraitBoundVariables implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IsLayerTrait_boundVariables';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'size' => '\OpenAPI\Client\Model\IsLayerTraitBoundVariablesSize',
        'individual_stroke_weights' => '\OpenAPI\Client\Model\IsLayerTraitBoundVariablesIndividualStrokeWeights',
        'characters' => '\OpenAPI\Client\Model\VariableAlias',
        'item_spacing' => '\OpenAPI\Client\Model\VariableAlias',
        'padding_left' => '\OpenAPI\Client\Model\VariableAlias',
        'padding_right' => '\OpenAPI\Client\Model\VariableAlias',
        'padding_top' => '\OpenAPI\Client\Model\VariableAlias',
        'padding_bottom' => '\OpenAPI\Client\Model\VariableAlias',
        'visible' => '\OpenAPI\Client\Model\VariableAlias',
        'top_left_radius' => '\OpenAPI\Client\Model\VariableAlias',
        'top_right_radius' => '\OpenAPI\Client\Model\VariableAlias',
        'bottom_left_radius' => '\OpenAPI\Client\Model\VariableAlias',
        'bottom_right_radius' => '\OpenAPI\Client\Model\VariableAlias',
        'min_width' => '\OpenAPI\Client\Model\VariableAlias',
        'max_width' => '\OpenAPI\Client\Model\VariableAlias',
        'min_height' => '\OpenAPI\Client\Model\VariableAlias',
        'max_height' => '\OpenAPI\Client\Model\VariableAlias',
        'counter_axis_spacing' => '\OpenAPI\Client\Model\VariableAlias',
        'opacity' => '\OpenAPI\Client\Model\VariableAlias',
        'font_family' => '\OpenAPI\Client\Model\VariableAlias[]',
        'font_size' => '\OpenAPI\Client\Model\VariableAlias[]',
        'font_style' => '\OpenAPI\Client\Model\VariableAlias[]',
        'font_weight' => '\OpenAPI\Client\Model\VariableAlias[]',
        'letter_spacing' => '\OpenAPI\Client\Model\VariableAlias[]',
        'line_height' => '\OpenAPI\Client\Model\VariableAlias[]',
        'paragraph_spacing' => '\OpenAPI\Client\Model\VariableAlias[]',
        'paragraph_indent' => '\OpenAPI\Client\Model\VariableAlias[]',
        'fills' => '\OpenAPI\Client\Model\VariableAlias[]',
        'strokes' => '\OpenAPI\Client\Model\VariableAlias[]',
        'component_properties' => 'array<string,\OpenAPI\Client\Model\VariableAlias>',
        'text_range_fills' => '\OpenAPI\Client\Model\VariableAlias[]',
        'effects' => '\OpenAPI\Client\Model\VariableAlias[]',
        'layout_grids' => '\OpenAPI\Client\Model\VariableAlias[]',
        'rectangle_corner_radii' => '\OpenAPI\Client\Model\IsLayerTraitBoundVariablesRectangleCornerRadii'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'size' => null,
        'individual_stroke_weights' => null,
        'characters' => null,
        'item_spacing' => null,
        'padding_left' => null,
        'padding_right' => null,
        'padding_top' => null,
        'padding_bottom' => null,
        'visible' => null,
        'top_left_radius' => null,
        'top_right_radius' => null,
        'bottom_left_radius' => null,
        'bottom_right_radius' => null,
        'min_width' => null,
        'max_width' => null,
        'min_height' => null,
        'max_height' => null,
        'counter_axis_spacing' => null,
        'opacity' => null,
        'font_family' => null,
        'font_size' => null,
        'font_style' => null,
        'font_weight' => null,
        'letter_spacing' => null,
        'line_height' => null,
        'paragraph_spacing' => null,
        'paragraph_indent' => null,
        'fills' => null,
        'strokes' => null,
        'component_properties' => null,
        'text_range_fills' => null,
        'effects' => null,
        'layout_grids' => null,
        'rectangle_corner_radii' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'size' => false,
        'individual_stroke_weights' => false,
        'characters' => false,
        'item_spacing' => false,
        'padding_left' => false,
        'padding_right' => false,
        'padding_top' => false,
        'padding_bottom' => false,
        'visible' => false,
        'top_left_radius' => false,
        'top_right_radius' => false,
        'bottom_left_radius' => false,
        'bottom_right_radius' => false,
        'min_width' => false,
        'max_width' => false,
        'min_height' => false,
        'max_height' => false,
        'counter_axis_spacing' => false,
        'opacity' => false,
        'font_family' => false,
        'font_size' => false,
        'font_style' => false,
        'font_weight' => false,
        'letter_spacing' => false,
        'line_height' => false,
        'paragraph_spacing' => false,
        'paragraph_indent' => false,
        'fills' => false,
        'strokes' => false,
        'component_properties' => false,
        'text_range_fills' => false,
        'effects' => false,
        'layout_grids' => false,
        'rectangle_corner_radii' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'size' => 'size',
        'individual_stroke_weights' => 'individualStrokeWeights',
        'characters' => 'characters',
        'item_spacing' => 'itemSpacing',
        'padding_left' => 'paddingLeft',
        'padding_right' => 'paddingRight',
        'padding_top' => 'paddingTop',
        'padding_bottom' => 'paddingBottom',
        'visible' => 'visible',
        'top_left_radius' => 'topLeftRadius',
        'top_right_radius' => 'topRightRadius',
        'bottom_left_radius' => 'bottomLeftRadius',
        'bottom_right_radius' => 'bottomRightRadius',
        'min_width' => 'minWidth',
        'max_width' => 'maxWidth',
        'min_height' => 'minHeight',
        'max_height' => 'maxHeight',
        'counter_axis_spacing' => 'counterAxisSpacing',
        'opacity' => 'opacity',
        'font_family' => 'fontFamily',
        'font_size' => 'fontSize',
        'font_style' => 'fontStyle',
        'font_weight' => 'fontWeight',
        'letter_spacing' => 'letterSpacing',
        'line_height' => 'lineHeight',
        'paragraph_spacing' => 'paragraphSpacing',
        'paragraph_indent' => 'paragraphIndent',
        'fills' => 'fills',
        'strokes' => 'strokes',
        'component_properties' => 'componentProperties',
        'text_range_fills' => 'textRangeFills',
        'effects' => 'effects',
        'layout_grids' => 'layoutGrids',
        'rectangle_corner_radii' => 'rectangleCornerRadii'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'size' => 'setSize',
        'individual_stroke_weights' => 'setIndividualStrokeWeights',
        'characters' => 'setCharacters',
        'item_spacing' => 'setItemSpacing',
        'padding_left' => 'setPaddingLeft',
        'padding_right' => 'setPaddingRight',
        'padding_top' => 'setPaddingTop',
        'padding_bottom' => 'setPaddingBottom',
        'visible' => 'setVisible',
        'top_left_radius' => 'setTopLeftRadius',
        'top_right_radius' => 'setTopRightRadius',
        'bottom_left_radius' => 'setBottomLeftRadius',
        'bottom_right_radius' => 'setBottomRightRadius',
        'min_width' => 'setMinWidth',
        'max_width' => 'setMaxWidth',
        'min_height' => 'setMinHeight',
        'max_height' => 'setMaxHeight',
        'counter_axis_spacing' => 'setCounterAxisSpacing',
        'opacity' => 'setOpacity',
        'font_family' => 'setFontFamily',
        'font_size' => 'setFontSize',
        'font_style' => 'setFontStyle',
        'font_weight' => 'setFontWeight',
        'letter_spacing' => 'setLetterSpacing',
        'line_height' => 'setLineHeight',
        'paragraph_spacing' => 'setParagraphSpacing',
        'paragraph_indent' => 'setParagraphIndent',
        'fills' => 'setFills',
        'strokes' => 'setStrokes',
        'component_properties' => 'setComponentProperties',
        'text_range_fills' => 'setTextRangeFills',
        'effects' => 'setEffects',
        'layout_grids' => 'setLayoutGrids',
        'rectangle_corner_radii' => 'setRectangleCornerRadii'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'size' => 'getSize',
        'individual_stroke_weights' => 'getIndividualStrokeWeights',
        'characters' => 'getCharacters',
        'item_spacing' => 'getItemSpacing',
        'padding_left' => 'getPaddingLeft',
        'padding_right' => 'getPaddingRight',
        'padding_top' => 'getPaddingTop',
        'padding_bottom' => 'getPaddingBottom',
        'visible' => 'getVisible',
        'top_left_radius' => 'getTopLeftRadius',
        'top_right_radius' => 'getTopRightRadius',
        'bottom_left_radius' => 'getBottomLeftRadius',
        'bottom_right_radius' => 'getBottomRightRadius',
        'min_width' => 'getMinWidth',
        'max_width' => 'getMaxWidth',
        'min_height' => 'getMinHeight',
        'max_height' => 'getMaxHeight',
        'counter_axis_spacing' => 'getCounterAxisSpacing',
        'opacity' => 'getOpacity',
        'font_family' => 'getFontFamily',
        'font_size' => 'getFontSize',
        'font_style' => 'getFontStyle',
        'font_weight' => 'getFontWeight',
        'letter_spacing' => 'getLetterSpacing',
        'line_height' => 'getLineHeight',
        'paragraph_spacing' => 'getParagraphSpacing',
        'paragraph_indent' => 'getParagraphIndent',
        'fills' => 'getFills',
        'strokes' => 'getStrokes',
        'component_properties' => 'getComponentProperties',
        'text_range_fills' => 'getTextRangeFills',
        'effects' => 'getEffects',
        'layout_grids' => 'getLayoutGrids',
        'rectangle_corner_radii' => 'getRectangleCornerRadii'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('individual_stroke_weights', $data ?? [], null);
        $this->setIfExists('characters', $data ?? [], null);
        $this->setIfExists('item_spacing', $data ?? [], null);
        $this->setIfExists('padding_left', $data ?? [], null);
        $this->setIfExists('padding_right', $data ?? [], null);
        $this->setIfExists('padding_top', $data ?? [], null);
        $this->setIfExists('padding_bottom', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('top_left_radius', $data ?? [], null);
        $this->setIfExists('top_right_radius', $data ?? [], null);
        $this->setIfExists('bottom_left_radius', $data ?? [], null);
        $this->setIfExists('bottom_right_radius', $data ?? [], null);
        $this->setIfExists('min_width', $data ?? [], null);
        $this->setIfExists('max_width', $data ?? [], null);
        $this->setIfExists('min_height', $data ?? [], null);
        $this->setIfExists('max_height', $data ?? [], null);
        $this->setIfExists('counter_axis_spacing', $data ?? [], null);
        $this->setIfExists('opacity', $data ?? [], null);
        $this->setIfExists('font_family', $data ?? [], null);
        $this->setIfExists('font_size', $data ?? [], null);
        $this->setIfExists('font_style', $data ?? [], null);
        $this->setIfExists('font_weight', $data ?? [], null);
        $this->setIfExists('letter_spacing', $data ?? [], null);
        $this->setIfExists('line_height', $data ?? [], null);
        $this->setIfExists('paragraph_spacing', $data ?? [], null);
        $this->setIfExists('paragraph_indent', $data ?? [], null);
        $this->setIfExists('fills', $data ?? [], null);
        $this->setIfExists('strokes', $data ?? [], null);
        $this->setIfExists('component_properties', $data ?? [], null);
        $this->setIfExists('text_range_fills', $data ?? [], null);
        $this->setIfExists('effects', $data ?? [], null);
        $this->setIfExists('layout_grids', $data ?? [], null);
        $this->setIfExists('rectangle_corner_radii', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets size
     *
     * @return \OpenAPI\Client\Model\IsLayerTraitBoundVariablesSize|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \OpenAPI\Client\Model\IsLayerTraitBoundVariablesSize|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets individual_stroke_weights
     *
     * @return \OpenAPI\Client\Model\IsLayerTraitBoundVariablesIndividualStrokeWeights|null
     */
    public function getIndividualStrokeWeights()
    {
        return $this->container['individual_stroke_weights'];
    }

    /**
     * Sets individual_stroke_weights
     *
     * @param \OpenAPI\Client\Model\IsLayerTraitBoundVariablesIndividualStrokeWeights|null $individual_stroke_weights individual_stroke_weights
     *
     * @return self
     */
    public function setIndividualStrokeWeights($individual_stroke_weights)
    {
        if (is_null($individual_stroke_weights)) {
            throw new \InvalidArgumentException('non-nullable individual_stroke_weights cannot be null');
        }
        $this->container['individual_stroke_weights'] = $individual_stroke_weights;

        return $this;
    }

    /**
     * Gets characters
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getCharacters()
    {
        return $this->container['characters'];
    }

    /**
     * Sets characters
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $characters characters
     *
     * @return self
     */
    public function setCharacters($characters)
    {
        if (is_null($characters)) {
            throw new \InvalidArgumentException('non-nullable characters cannot be null');
        }
        $this->container['characters'] = $characters;

        return $this;
    }

    /**
     * Gets item_spacing
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getItemSpacing()
    {
        return $this->container['item_spacing'];
    }

    /**
     * Sets item_spacing
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $item_spacing item_spacing
     *
     * @return self
     */
    public function setItemSpacing($item_spacing)
    {
        if (is_null($item_spacing)) {
            throw new \InvalidArgumentException('non-nullable item_spacing cannot be null');
        }
        $this->container['item_spacing'] = $item_spacing;

        return $this;
    }

    /**
     * Gets padding_left
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getPaddingLeft()
    {
        return $this->container['padding_left'];
    }

    /**
     * Sets padding_left
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $padding_left padding_left
     *
     * @return self
     */
    public function setPaddingLeft($padding_left)
    {
        if (is_null($padding_left)) {
            throw new \InvalidArgumentException('non-nullable padding_left cannot be null');
        }
        $this->container['padding_left'] = $padding_left;

        return $this;
    }

    /**
     * Gets padding_right
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getPaddingRight()
    {
        return $this->container['padding_right'];
    }

    /**
     * Sets padding_right
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $padding_right padding_right
     *
     * @return self
     */
    public function setPaddingRight($padding_right)
    {
        if (is_null($padding_right)) {
            throw new \InvalidArgumentException('non-nullable padding_right cannot be null');
        }
        $this->container['padding_right'] = $padding_right;

        return $this;
    }

    /**
     * Gets padding_top
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getPaddingTop()
    {
        return $this->container['padding_top'];
    }

    /**
     * Sets padding_top
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $padding_top padding_top
     *
     * @return self
     */
    public function setPaddingTop($padding_top)
    {
        if (is_null($padding_top)) {
            throw new \InvalidArgumentException('non-nullable padding_top cannot be null');
        }
        $this->container['padding_top'] = $padding_top;

        return $this;
    }

    /**
     * Gets padding_bottom
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getPaddingBottom()
    {
        return $this->container['padding_bottom'];
    }

    /**
     * Sets padding_bottom
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $padding_bottom padding_bottom
     *
     * @return self
     */
    public function setPaddingBottom($padding_bottom)
    {
        if (is_null($padding_bottom)) {
            throw new \InvalidArgumentException('non-nullable padding_bottom cannot be null');
        }
        $this->container['padding_bottom'] = $padding_bottom;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $visible visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets top_left_radius
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getTopLeftRadius()
    {
        return $this->container['top_left_radius'];
    }

    /**
     * Sets top_left_radius
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $top_left_radius top_left_radius
     *
     * @return self
     */
    public function setTopLeftRadius($top_left_radius)
    {
        if (is_null($top_left_radius)) {
            throw new \InvalidArgumentException('non-nullable top_left_radius cannot be null');
        }
        $this->container['top_left_radius'] = $top_left_radius;

        return $this;
    }

    /**
     * Gets top_right_radius
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getTopRightRadius()
    {
        return $this->container['top_right_radius'];
    }

    /**
     * Sets top_right_radius
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $top_right_radius top_right_radius
     *
     * @return self
     */
    public function setTopRightRadius($top_right_radius)
    {
        if (is_null($top_right_radius)) {
            throw new \InvalidArgumentException('non-nullable top_right_radius cannot be null');
        }
        $this->container['top_right_radius'] = $top_right_radius;

        return $this;
    }

    /**
     * Gets bottom_left_radius
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getBottomLeftRadius()
    {
        return $this->container['bottom_left_radius'];
    }

    /**
     * Sets bottom_left_radius
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $bottom_left_radius bottom_left_radius
     *
     * @return self
     */
    public function setBottomLeftRadius($bottom_left_radius)
    {
        if (is_null($bottom_left_radius)) {
            throw new \InvalidArgumentException('non-nullable bottom_left_radius cannot be null');
        }
        $this->container['bottom_left_radius'] = $bottom_left_radius;

        return $this;
    }

    /**
     * Gets bottom_right_radius
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getBottomRightRadius()
    {
        return $this->container['bottom_right_radius'];
    }

    /**
     * Sets bottom_right_radius
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $bottom_right_radius bottom_right_radius
     *
     * @return self
     */
    public function setBottomRightRadius($bottom_right_radius)
    {
        if (is_null($bottom_right_radius)) {
            throw new \InvalidArgumentException('non-nullable bottom_right_radius cannot be null');
        }
        $this->container['bottom_right_radius'] = $bottom_right_radius;

        return $this;
    }

    /**
     * Gets min_width
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getMinWidth()
    {
        return $this->container['min_width'];
    }

    /**
     * Sets min_width
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $min_width min_width
     *
     * @return self
     */
    public function setMinWidth($min_width)
    {
        if (is_null($min_width)) {
            throw new \InvalidArgumentException('non-nullable min_width cannot be null');
        }
        $this->container['min_width'] = $min_width;

        return $this;
    }

    /**
     * Gets max_width
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getMaxWidth()
    {
        return $this->container['max_width'];
    }

    /**
     * Sets max_width
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $max_width max_width
     *
     * @return self
     */
    public function setMaxWidth($max_width)
    {
        if (is_null($max_width)) {
            throw new \InvalidArgumentException('non-nullable max_width cannot be null');
        }
        $this->container['max_width'] = $max_width;

        return $this;
    }

    /**
     * Gets min_height
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getMinHeight()
    {
        return $this->container['min_height'];
    }

    /**
     * Sets min_height
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $min_height min_height
     *
     * @return self
     */
    public function setMinHeight($min_height)
    {
        if (is_null($min_height)) {
            throw new \InvalidArgumentException('non-nullable min_height cannot be null');
        }
        $this->container['min_height'] = $min_height;

        return $this;
    }

    /**
     * Gets max_height
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getMaxHeight()
    {
        return $this->container['max_height'];
    }

    /**
     * Sets max_height
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $max_height max_height
     *
     * @return self
     */
    public function setMaxHeight($max_height)
    {
        if (is_null($max_height)) {
            throw new \InvalidArgumentException('non-nullable max_height cannot be null');
        }
        $this->container['max_height'] = $max_height;

        return $this;
    }

    /**
     * Gets counter_axis_spacing
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getCounterAxisSpacing()
    {
        return $this->container['counter_axis_spacing'];
    }

    /**
     * Sets counter_axis_spacing
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $counter_axis_spacing counter_axis_spacing
     *
     * @return self
     */
    public function setCounterAxisSpacing($counter_axis_spacing)
    {
        if (is_null($counter_axis_spacing)) {
            throw new \InvalidArgumentException('non-nullable counter_axis_spacing cannot be null');
        }
        $this->container['counter_axis_spacing'] = $counter_axis_spacing;

        return $this;
    }

    /**
     * Gets opacity
     *
     * @return \OpenAPI\Client\Model\VariableAlias|null
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     *
     * @param \OpenAPI\Client\Model\VariableAlias|null $opacity opacity
     *
     * @return self
     */
    public function setOpacity($opacity)
    {
        if (is_null($opacity)) {
            throw new \InvalidArgumentException('non-nullable opacity cannot be null');
        }
        $this->container['opacity'] = $opacity;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $font_family font_family
     *
     * @return self
     */
    public function setFontFamily($font_family)
    {
        if (is_null($font_family)) {
            throw new \InvalidArgumentException('non-nullable font_family cannot be null');
        }
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $font_size font_size
     *
     * @return self
     */
    public function setFontSize($font_size)
    {
        if (is_null($font_size)) {
            throw new \InvalidArgumentException('non-nullable font_size cannot be null');
        }
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets font_style
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getFontStyle()
    {
        return $this->container['font_style'];
    }

    /**
     * Sets font_style
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $font_style font_style
     *
     * @return self
     */
    public function setFontStyle($font_style)
    {
        if (is_null($font_style)) {
            throw new \InvalidArgumentException('non-nullable font_style cannot be null');
        }
        $this->container['font_style'] = $font_style;

        return $this;
    }

    /**
     * Gets font_weight
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getFontWeight()
    {
        return $this->container['font_weight'];
    }

    /**
     * Sets font_weight
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $font_weight font_weight
     *
     * @return self
     */
    public function setFontWeight($font_weight)
    {
        if (is_null($font_weight)) {
            throw new \InvalidArgumentException('non-nullable font_weight cannot be null');
        }
        $this->container['font_weight'] = $font_weight;

        return $this;
    }

    /**
     * Gets letter_spacing
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getLetterSpacing()
    {
        return $this->container['letter_spacing'];
    }

    /**
     * Sets letter_spacing
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $letter_spacing letter_spacing
     *
     * @return self
     */
    public function setLetterSpacing($letter_spacing)
    {
        if (is_null($letter_spacing)) {
            throw new \InvalidArgumentException('non-nullable letter_spacing cannot be null');
        }
        $this->container['letter_spacing'] = $letter_spacing;

        return $this;
    }

    /**
     * Gets line_height
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getLineHeight()
    {
        return $this->container['line_height'];
    }

    /**
     * Sets line_height
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $line_height line_height
     *
     * @return self
     */
    public function setLineHeight($line_height)
    {
        if (is_null($line_height)) {
            throw new \InvalidArgumentException('non-nullable line_height cannot be null');
        }
        $this->container['line_height'] = $line_height;

        return $this;
    }

    /**
     * Gets paragraph_spacing
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getParagraphSpacing()
    {
        return $this->container['paragraph_spacing'];
    }

    /**
     * Sets paragraph_spacing
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $paragraph_spacing paragraph_spacing
     *
     * @return self
     */
    public function setParagraphSpacing($paragraph_spacing)
    {
        if (is_null($paragraph_spacing)) {
            throw new \InvalidArgumentException('non-nullable paragraph_spacing cannot be null');
        }
        $this->container['paragraph_spacing'] = $paragraph_spacing;

        return $this;
    }

    /**
     * Gets paragraph_indent
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getParagraphIndent()
    {
        return $this->container['paragraph_indent'];
    }

    /**
     * Sets paragraph_indent
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $paragraph_indent paragraph_indent
     *
     * @return self
     */
    public function setParagraphIndent($paragraph_indent)
    {
        if (is_null($paragraph_indent)) {
            throw new \InvalidArgumentException('non-nullable paragraph_indent cannot be null');
        }
        $this->container['paragraph_indent'] = $paragraph_indent;

        return $this;
    }

    /**
     * Gets fills
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getFills()
    {
        return $this->container['fills'];
    }

    /**
     * Sets fills
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $fills fills
     *
     * @return self
     */
    public function setFills($fills)
    {
        if (is_null($fills)) {
            throw new \InvalidArgumentException('non-nullable fills cannot be null');
        }
        $this->container['fills'] = $fills;

        return $this;
    }

    /**
     * Gets strokes
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getStrokes()
    {
        return $this->container['strokes'];
    }

    /**
     * Sets strokes
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $strokes strokes
     *
     * @return self
     */
    public function setStrokes($strokes)
    {
        if (is_null($strokes)) {
            throw new \InvalidArgumentException('non-nullable strokes cannot be null');
        }
        $this->container['strokes'] = $strokes;

        return $this;
    }

    /**
     * Gets component_properties
     *
     * @return array<string,\OpenAPI\Client\Model\VariableAlias>|null
     */
    public function getComponentProperties()
    {
        return $this->container['component_properties'];
    }

    /**
     * Sets component_properties
     *
     * @param array<string,\OpenAPI\Client\Model\VariableAlias>|null $component_properties component_properties
     *
     * @return self
     */
    public function setComponentProperties($component_properties)
    {
        if (is_null($component_properties)) {
            throw new \InvalidArgumentException('non-nullable component_properties cannot be null');
        }
        $this->container['component_properties'] = $component_properties;

        return $this;
    }

    /**
     * Gets text_range_fills
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getTextRangeFills()
    {
        return $this->container['text_range_fills'];
    }

    /**
     * Sets text_range_fills
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $text_range_fills text_range_fills
     *
     * @return self
     */
    public function setTextRangeFills($text_range_fills)
    {
        if (is_null($text_range_fills)) {
            throw new \InvalidArgumentException('non-nullable text_range_fills cannot be null');
        }
        $this->container['text_range_fills'] = $text_range_fills;

        return $this;
    }

    /**
     * Gets effects
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getEffects()
    {
        return $this->container['effects'];
    }

    /**
     * Sets effects
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $effects effects
     *
     * @return self
     */
    public function setEffects($effects)
    {
        if (is_null($effects)) {
            throw new \InvalidArgumentException('non-nullable effects cannot be null');
        }
        $this->container['effects'] = $effects;

        return $this;
    }

    /**
     * Gets layout_grids
     *
     * @return \OpenAPI\Client\Model\VariableAlias[]|null
     */
    public function getLayoutGrids()
    {
        return $this->container['layout_grids'];
    }

    /**
     * Sets layout_grids
     *
     * @param \OpenAPI\Client\Model\VariableAlias[]|null $layout_grids layout_grids
     *
     * @return self
     */
    public function setLayoutGrids($layout_grids)
    {
        if (is_null($layout_grids)) {
            throw new \InvalidArgumentException('non-nullable layout_grids cannot be null');
        }
        $this->container['layout_grids'] = $layout_grids;

        return $this;
    }

    /**
     * Gets rectangle_corner_radii
     *
     * @return \OpenAPI\Client\Model\IsLayerTraitBoundVariablesRectangleCornerRadii|null
     */
    public function getRectangleCornerRadii()
    {
        return $this->container['rectangle_corner_radii'];
    }

    /**
     * Sets rectangle_corner_radii
     *
     * @param \OpenAPI\Client\Model\IsLayerTraitBoundVariablesRectangleCornerRadii|null $rectangle_corner_radii rectangle_corner_radii
     *
     * @return self
     */
    public function setRectangleCornerRadii($rectangle_corner_radii)
    {
        if (is_null($rectangle_corner_radii)) {
            throw new \InvalidArgumentException('non-nullable rectangle_corner_radii cannot be null');
        }
        $this->container['rectangle_corner_radii'] = $rectangle_corner_radii;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


