<?php
/**
 * HasFramePropertiesTrait
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HasFramePropertiesTrait Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HasFramePropertiesTrait implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HasFramePropertiesTrait';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'clips_content' => 'bool',
        'background' => '\OpenAPI\Client\Model\Paint[]',
        'background_color' => '\OpenAPI\Client\Model\RGBA',
        'layout_grids' => '\OpenAPI\Client\Model\LayoutGrid[]',
        'overflow_direction' => 'string',
        'layout_mode' => 'string',
        'primary_axis_sizing_mode' => 'string',
        'counter_axis_sizing_mode' => 'string',
        'primary_axis_align_items' => 'string',
        'counter_axis_align_items' => 'string',
        'padding_left' => 'float',
        'padding_right' => 'float',
        'padding_top' => 'float',
        'padding_bottom' => 'float',
        'item_spacing' => 'float',
        'item_reverse_z_index' => 'bool',
        'strokes_included_in_layout' => 'bool',
        'layout_wrap' => 'string',
        'counter_axis_spacing' => 'float',
        'counter_axis_align_content' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'clips_content' => null,
        'background' => null,
        'background_color' => null,
        'layout_grids' => null,
        'overflow_direction' => null,
        'layout_mode' => null,
        'primary_axis_sizing_mode' => null,
        'counter_axis_sizing_mode' => null,
        'primary_axis_align_items' => null,
        'counter_axis_align_items' => null,
        'padding_left' => null,
        'padding_right' => null,
        'padding_top' => null,
        'padding_bottom' => null,
        'item_spacing' => null,
        'item_reverse_z_index' => null,
        'strokes_included_in_layout' => null,
        'layout_wrap' => null,
        'counter_axis_spacing' => null,
        'counter_axis_align_content' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'clips_content' => false,
        'background' => false,
        'background_color' => false,
        'layout_grids' => false,
        'overflow_direction' => false,
        'layout_mode' => false,
        'primary_axis_sizing_mode' => false,
        'counter_axis_sizing_mode' => false,
        'primary_axis_align_items' => false,
        'counter_axis_align_items' => false,
        'padding_left' => false,
        'padding_right' => false,
        'padding_top' => false,
        'padding_bottom' => false,
        'item_spacing' => false,
        'item_reverse_z_index' => false,
        'strokes_included_in_layout' => false,
        'layout_wrap' => false,
        'counter_axis_spacing' => false,
        'counter_axis_align_content' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clips_content' => 'clipsContent',
        'background' => 'background',
        'background_color' => 'backgroundColor',
        'layout_grids' => 'layoutGrids',
        'overflow_direction' => 'overflowDirection',
        'layout_mode' => 'layoutMode',
        'primary_axis_sizing_mode' => 'primaryAxisSizingMode',
        'counter_axis_sizing_mode' => 'counterAxisSizingMode',
        'primary_axis_align_items' => 'primaryAxisAlignItems',
        'counter_axis_align_items' => 'counterAxisAlignItems',
        'padding_left' => 'paddingLeft',
        'padding_right' => 'paddingRight',
        'padding_top' => 'paddingTop',
        'padding_bottom' => 'paddingBottom',
        'item_spacing' => 'itemSpacing',
        'item_reverse_z_index' => 'itemReverseZIndex',
        'strokes_included_in_layout' => 'strokesIncludedInLayout',
        'layout_wrap' => 'layoutWrap',
        'counter_axis_spacing' => 'counterAxisSpacing',
        'counter_axis_align_content' => 'counterAxisAlignContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clips_content' => 'setClipsContent',
        'background' => 'setBackground',
        'background_color' => 'setBackgroundColor',
        'layout_grids' => 'setLayoutGrids',
        'overflow_direction' => 'setOverflowDirection',
        'layout_mode' => 'setLayoutMode',
        'primary_axis_sizing_mode' => 'setPrimaryAxisSizingMode',
        'counter_axis_sizing_mode' => 'setCounterAxisSizingMode',
        'primary_axis_align_items' => 'setPrimaryAxisAlignItems',
        'counter_axis_align_items' => 'setCounterAxisAlignItems',
        'padding_left' => 'setPaddingLeft',
        'padding_right' => 'setPaddingRight',
        'padding_top' => 'setPaddingTop',
        'padding_bottom' => 'setPaddingBottom',
        'item_spacing' => 'setItemSpacing',
        'item_reverse_z_index' => 'setItemReverseZIndex',
        'strokes_included_in_layout' => 'setStrokesIncludedInLayout',
        'layout_wrap' => 'setLayoutWrap',
        'counter_axis_spacing' => 'setCounterAxisSpacing',
        'counter_axis_align_content' => 'setCounterAxisAlignContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clips_content' => 'getClipsContent',
        'background' => 'getBackground',
        'background_color' => 'getBackgroundColor',
        'layout_grids' => 'getLayoutGrids',
        'overflow_direction' => 'getOverflowDirection',
        'layout_mode' => 'getLayoutMode',
        'primary_axis_sizing_mode' => 'getPrimaryAxisSizingMode',
        'counter_axis_sizing_mode' => 'getCounterAxisSizingMode',
        'primary_axis_align_items' => 'getPrimaryAxisAlignItems',
        'counter_axis_align_items' => 'getCounterAxisAlignItems',
        'padding_left' => 'getPaddingLeft',
        'padding_right' => 'getPaddingRight',
        'padding_top' => 'getPaddingTop',
        'padding_bottom' => 'getPaddingBottom',
        'item_spacing' => 'getItemSpacing',
        'item_reverse_z_index' => 'getItemReverseZIndex',
        'strokes_included_in_layout' => 'getStrokesIncludedInLayout',
        'layout_wrap' => 'getLayoutWrap',
        'counter_axis_spacing' => 'getCounterAxisSpacing',
        'counter_axis_align_content' => 'getCounterAxisAlignContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OVERFLOW_DIRECTION_HORIZONTAL_SCROLLING = 'HORIZONTAL_SCROLLING';
    public const OVERFLOW_DIRECTION_VERTICAL_SCROLLING = 'VERTICAL_SCROLLING';
    public const OVERFLOW_DIRECTION_HORIZONTAL_AND_VERTICAL_SCROLLING = 'HORIZONTAL_AND_VERTICAL_SCROLLING';
    public const OVERFLOW_DIRECTION_NONE = 'NONE';
    public const LAYOUT_MODE_NONE = 'NONE';
    public const LAYOUT_MODE_HORIZONTAL = 'HORIZONTAL';
    public const LAYOUT_MODE_VERTICAL = 'VERTICAL';
    public const LAYOUT_MODE_GRID = 'GRID';
    public const PRIMARY_AXIS_SIZING_MODE_FIXED = 'FIXED';
    public const PRIMARY_AXIS_SIZING_MODE_AUTO = 'AUTO';
    public const COUNTER_AXIS_SIZING_MODE_FIXED = 'FIXED';
    public const COUNTER_AXIS_SIZING_MODE_AUTO = 'AUTO';
    public const PRIMARY_AXIS_ALIGN_ITEMS_MIN = 'MIN';
    public const PRIMARY_AXIS_ALIGN_ITEMS_CENTER = 'CENTER';
    public const PRIMARY_AXIS_ALIGN_ITEMS_MAX = 'MAX';
    public const PRIMARY_AXIS_ALIGN_ITEMS_SPACE_BETWEEN = 'SPACE_BETWEEN';
    public const COUNTER_AXIS_ALIGN_ITEMS_MIN = 'MIN';
    public const COUNTER_AXIS_ALIGN_ITEMS_CENTER = 'CENTER';
    public const COUNTER_AXIS_ALIGN_ITEMS_MAX = 'MAX';
    public const COUNTER_AXIS_ALIGN_ITEMS_BASELINE = 'BASELINE';
    public const LAYOUT_WRAP_NO_WRAP = 'NO_WRAP';
    public const LAYOUT_WRAP_WRAP = 'WRAP';
    public const COUNTER_AXIS_ALIGN_CONTENT_AUTO = 'AUTO';
    public const COUNTER_AXIS_ALIGN_CONTENT_SPACE_BETWEEN = 'SPACE_BETWEEN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOverflowDirectionAllowableValues()
    {
        return [
            self::OVERFLOW_DIRECTION_HORIZONTAL_SCROLLING,
            self::OVERFLOW_DIRECTION_VERTICAL_SCROLLING,
            self::OVERFLOW_DIRECTION_HORIZONTAL_AND_VERTICAL_SCROLLING,
            self::OVERFLOW_DIRECTION_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLayoutModeAllowableValues()
    {
        return [
            self::LAYOUT_MODE_NONE,
            self::LAYOUT_MODE_HORIZONTAL,
            self::LAYOUT_MODE_VERTICAL,
            self::LAYOUT_MODE_GRID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrimaryAxisSizingModeAllowableValues()
    {
        return [
            self::PRIMARY_AXIS_SIZING_MODE_FIXED,
            self::PRIMARY_AXIS_SIZING_MODE_AUTO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCounterAxisSizingModeAllowableValues()
    {
        return [
            self::COUNTER_AXIS_SIZING_MODE_FIXED,
            self::COUNTER_AXIS_SIZING_MODE_AUTO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrimaryAxisAlignItemsAllowableValues()
    {
        return [
            self::PRIMARY_AXIS_ALIGN_ITEMS_MIN,
            self::PRIMARY_AXIS_ALIGN_ITEMS_CENTER,
            self::PRIMARY_AXIS_ALIGN_ITEMS_MAX,
            self::PRIMARY_AXIS_ALIGN_ITEMS_SPACE_BETWEEN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCounterAxisAlignItemsAllowableValues()
    {
        return [
            self::COUNTER_AXIS_ALIGN_ITEMS_MIN,
            self::COUNTER_AXIS_ALIGN_ITEMS_CENTER,
            self::COUNTER_AXIS_ALIGN_ITEMS_MAX,
            self::COUNTER_AXIS_ALIGN_ITEMS_BASELINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLayoutWrapAllowableValues()
    {
        return [
            self::LAYOUT_WRAP_NO_WRAP,
            self::LAYOUT_WRAP_WRAP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCounterAxisAlignContentAllowableValues()
    {
        return [
            self::COUNTER_AXIS_ALIGN_CONTENT_AUTO,
            self::COUNTER_AXIS_ALIGN_CONTENT_SPACE_BETWEEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('clips_content', $data ?? [], null);
        $this->setIfExists('background', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('layout_grids', $data ?? [], null);
        $this->setIfExists('overflow_direction', $data ?? [], 'NONE');
        $this->setIfExists('layout_mode', $data ?? [], 'NONE');
        $this->setIfExists('primary_axis_sizing_mode', $data ?? [], 'AUTO');
        $this->setIfExists('counter_axis_sizing_mode', $data ?? [], 'AUTO');
        $this->setIfExists('primary_axis_align_items', $data ?? [], 'MIN');
        $this->setIfExists('counter_axis_align_items', $data ?? [], 'MIN');
        $this->setIfExists('padding_left', $data ?? [], 0);
        $this->setIfExists('padding_right', $data ?? [], 0);
        $this->setIfExists('padding_top', $data ?? [], 0);
        $this->setIfExists('padding_bottom', $data ?? [], 0);
        $this->setIfExists('item_spacing', $data ?? [], 0);
        $this->setIfExists('item_reverse_z_index', $data ?? [], false);
        $this->setIfExists('strokes_included_in_layout', $data ?? [], false);
        $this->setIfExists('layout_wrap', $data ?? [], null);
        $this->setIfExists('counter_axis_spacing', $data ?? [], null);
        $this->setIfExists('counter_axis_align_content', $data ?? [], 'AUTO');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['clips_content'] === null) {
            $invalidProperties[] = "'clips_content' can't be null";
        }
        $allowedValues = $this->getOverflowDirectionAllowableValues();
        if (!is_null($this->container['overflow_direction']) && !in_array($this->container['overflow_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'overflow_direction', must be one of '%s'",
                $this->container['overflow_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLayoutModeAllowableValues();
        if (!is_null($this->container['layout_mode']) && !in_array($this->container['layout_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'layout_mode', must be one of '%s'",
                $this->container['layout_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrimaryAxisSizingModeAllowableValues();
        if (!is_null($this->container['primary_axis_sizing_mode']) && !in_array($this->container['primary_axis_sizing_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'primary_axis_sizing_mode', must be one of '%s'",
                $this->container['primary_axis_sizing_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCounterAxisSizingModeAllowableValues();
        if (!is_null($this->container['counter_axis_sizing_mode']) && !in_array($this->container['counter_axis_sizing_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'counter_axis_sizing_mode', must be one of '%s'",
                $this->container['counter_axis_sizing_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrimaryAxisAlignItemsAllowableValues();
        if (!is_null($this->container['primary_axis_align_items']) && !in_array($this->container['primary_axis_align_items'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'primary_axis_align_items', must be one of '%s'",
                $this->container['primary_axis_align_items'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCounterAxisAlignItemsAllowableValues();
        if (!is_null($this->container['counter_axis_align_items']) && !in_array($this->container['counter_axis_align_items'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'counter_axis_align_items', must be one of '%s'",
                $this->container['counter_axis_align_items'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLayoutWrapAllowableValues();
        if (!is_null($this->container['layout_wrap']) && !in_array($this->container['layout_wrap'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'layout_wrap', must be one of '%s'",
                $this->container['layout_wrap'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCounterAxisAlignContentAllowableValues();
        if (!is_null($this->container['counter_axis_align_content']) && !in_array($this->container['counter_axis_align_content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'counter_axis_align_content', must be one of '%s'",
                $this->container['counter_axis_align_content'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clips_content
     *
     * @return bool
     */
    public function getClipsContent()
    {
        return $this->container['clips_content'];
    }

    /**
     * Sets clips_content
     *
     * @param bool $clips_content Whether or not this node clip content outside of its bounds
     *
     * @return self
     */
    public function setClipsContent($clips_content)
    {
        if (is_null($clips_content)) {
            throw new \InvalidArgumentException('non-nullable clips_content cannot be null');
        }
        $this->container['clips_content'] = $clips_content;

        return $this;
    }

    /**
     * Gets background
     *
     * @return \OpenAPI\Client\Model\Paint[]|null
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param \OpenAPI\Client\Model\Paint[]|null $background Background of the node. This is deprecated, as backgrounds for frames are now in the `fills` field.
     *
     * @return self
     */
    public function setBackground($background)
    {
        if (is_null($background)) {
            throw new \InvalidArgumentException('non-nullable background cannot be null');
        }
        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return \OpenAPI\Client\Model\RGBA|null
     * @deprecated
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param \OpenAPI\Client\Model\RGBA|null $background_color Background color of the node. This is deprecated, as frames now support more than a solid color as a background. Please use the `fills` field instead.
     *
     * @return self
     * @deprecated
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            throw new \InvalidArgumentException('non-nullable background_color cannot be null');
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets layout_grids
     *
     * @return \OpenAPI\Client\Model\LayoutGrid[]|null
     */
    public function getLayoutGrids()
    {
        return $this->container['layout_grids'];
    }

    /**
     * Sets layout_grids
     *
     * @param \OpenAPI\Client\Model\LayoutGrid[]|null $layout_grids An array of layout grids attached to this node (see layout grids section for more details). GROUP nodes do not have this attribute
     *
     * @return self
     */
    public function setLayoutGrids($layout_grids)
    {
        if (is_null($layout_grids)) {
            throw new \InvalidArgumentException('non-nullable layout_grids cannot be null');
        }
        $this->container['layout_grids'] = $layout_grids;

        return $this;
    }

    /**
     * Gets overflow_direction
     *
     * @return string|null
     */
    public function getOverflowDirection()
    {
        return $this->container['overflow_direction'];
    }

    /**
     * Sets overflow_direction
     *
     * @param string|null $overflow_direction Whether a node has primary axis scrolling, horizontal or vertical.
     *
     * @return self
     */
    public function setOverflowDirection($overflow_direction)
    {
        if (is_null($overflow_direction)) {
            throw new \InvalidArgumentException('non-nullable overflow_direction cannot be null');
        }
        $allowedValues = $this->getOverflowDirectionAllowableValues();
        if (!in_array($overflow_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'overflow_direction', must be one of '%s'",
                    $overflow_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['overflow_direction'] = $overflow_direction;

        return $this;
    }

    /**
     * Gets layout_mode
     *
     * @return string|null
     */
    public function getLayoutMode()
    {
        return $this->container['layout_mode'];
    }

    /**
     * Sets layout_mode
     *
     * @param string|null $layout_mode Whether this layer uses auto-layout to position its children.
     *
     * @return self
     */
    public function setLayoutMode($layout_mode)
    {
        if (is_null($layout_mode)) {
            throw new \InvalidArgumentException('non-nullable layout_mode cannot be null');
        }
        $allowedValues = $this->getLayoutModeAllowableValues();
        if (!in_array($layout_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'layout_mode', must be one of '%s'",
                    $layout_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['layout_mode'] = $layout_mode;

        return $this;
    }

    /**
     * Gets primary_axis_sizing_mode
     *
     * @return string|null
     */
    public function getPrimaryAxisSizingMode()
    {
        return $this->container['primary_axis_sizing_mode'];
    }

    /**
     * Sets primary_axis_sizing_mode
     *
     * @param string|null $primary_axis_sizing_mode Whether the primary axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setPrimaryAxisSizingMode($primary_axis_sizing_mode)
    {
        if (is_null($primary_axis_sizing_mode)) {
            throw new \InvalidArgumentException('non-nullable primary_axis_sizing_mode cannot be null');
        }
        $allowedValues = $this->getPrimaryAxisSizingModeAllowableValues();
        if (!in_array($primary_axis_sizing_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'primary_axis_sizing_mode', must be one of '%s'",
                    $primary_axis_sizing_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['primary_axis_sizing_mode'] = $primary_axis_sizing_mode;

        return $this;
    }

    /**
     * Gets counter_axis_sizing_mode
     *
     * @return string|null
     */
    public function getCounterAxisSizingMode()
    {
        return $this->container['counter_axis_sizing_mode'];
    }

    /**
     * Sets counter_axis_sizing_mode
     *
     * @param string|null $counter_axis_sizing_mode Whether the counter axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setCounterAxisSizingMode($counter_axis_sizing_mode)
    {
        if (is_null($counter_axis_sizing_mode)) {
            throw new \InvalidArgumentException('non-nullable counter_axis_sizing_mode cannot be null');
        }
        $allowedValues = $this->getCounterAxisSizingModeAllowableValues();
        if (!in_array($counter_axis_sizing_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'counter_axis_sizing_mode', must be one of '%s'",
                    $counter_axis_sizing_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['counter_axis_sizing_mode'] = $counter_axis_sizing_mode;

        return $this;
    }

    /**
     * Gets primary_axis_align_items
     *
     * @return string|null
     */
    public function getPrimaryAxisAlignItems()
    {
        return $this->container['primary_axis_align_items'];
    }

    /**
     * Sets primary_axis_align_items
     *
     * @param string|null $primary_axis_align_items Determines how the auto-layout frame's children should be aligned in the primary axis direction. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setPrimaryAxisAlignItems($primary_axis_align_items)
    {
        if (is_null($primary_axis_align_items)) {
            throw new \InvalidArgumentException('non-nullable primary_axis_align_items cannot be null');
        }
        $allowedValues = $this->getPrimaryAxisAlignItemsAllowableValues();
        if (!in_array($primary_axis_align_items, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'primary_axis_align_items', must be one of '%s'",
                    $primary_axis_align_items,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['primary_axis_align_items'] = $primary_axis_align_items;

        return $this;
    }

    /**
     * Gets counter_axis_align_items
     *
     * @return string|null
     */
    public function getCounterAxisAlignItems()
    {
        return $this->container['counter_axis_align_items'];
    }

    /**
     * Sets counter_axis_align_items
     *
     * @param string|null $counter_axis_align_items Determines how the auto-layout frame's children should be aligned in the counter axis direction. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setCounterAxisAlignItems($counter_axis_align_items)
    {
        if (is_null($counter_axis_align_items)) {
            throw new \InvalidArgumentException('non-nullable counter_axis_align_items cannot be null');
        }
        $allowedValues = $this->getCounterAxisAlignItemsAllowableValues();
        if (!in_array($counter_axis_align_items, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'counter_axis_align_items', must be one of '%s'",
                    $counter_axis_align_items,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['counter_axis_align_items'] = $counter_axis_align_items;

        return $this;
    }

    /**
     * Gets padding_left
     *
     * @return float|null
     */
    public function getPaddingLeft()
    {
        return $this->container['padding_left'];
    }

    /**
     * Sets padding_left
     *
     * @param float|null $padding_left The padding between the left border of the frame and its children. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setPaddingLeft($padding_left)
    {
        if (is_null($padding_left)) {
            throw new \InvalidArgumentException('non-nullable padding_left cannot be null');
        }
        $this->container['padding_left'] = $padding_left;

        return $this;
    }

    /**
     * Gets padding_right
     *
     * @return float|null
     */
    public function getPaddingRight()
    {
        return $this->container['padding_right'];
    }

    /**
     * Sets padding_right
     *
     * @param float|null $padding_right The padding between the right border of the frame and its children. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setPaddingRight($padding_right)
    {
        if (is_null($padding_right)) {
            throw new \InvalidArgumentException('non-nullable padding_right cannot be null');
        }
        $this->container['padding_right'] = $padding_right;

        return $this;
    }

    /**
     * Gets padding_top
     *
     * @return float|null
     */
    public function getPaddingTop()
    {
        return $this->container['padding_top'];
    }

    /**
     * Sets padding_top
     *
     * @param float|null $padding_top The padding between the top border of the frame and its children. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setPaddingTop($padding_top)
    {
        if (is_null($padding_top)) {
            throw new \InvalidArgumentException('non-nullable padding_top cannot be null');
        }
        $this->container['padding_top'] = $padding_top;

        return $this;
    }

    /**
     * Gets padding_bottom
     *
     * @return float|null
     */
    public function getPaddingBottom()
    {
        return $this->container['padding_bottom'];
    }

    /**
     * Sets padding_bottom
     *
     * @param float|null $padding_bottom The padding between the bottom border of the frame and its children. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setPaddingBottom($padding_bottom)
    {
        if (is_null($padding_bottom)) {
            throw new \InvalidArgumentException('non-nullable padding_bottom cannot be null');
        }
        $this->container['padding_bottom'] = $padding_bottom;

        return $this;
    }

    /**
     * Gets item_spacing
     *
     * @return float|null
     */
    public function getItemSpacing()
    {
        return $this->container['item_spacing'];
    }

    /**
     * Sets item_spacing
     *
     * @param float|null $item_spacing The distance between children of the frame. Can be negative. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setItemSpacing($item_spacing)
    {
        if (is_null($item_spacing)) {
            throw new \InvalidArgumentException('non-nullable item_spacing cannot be null');
        }
        $this->container['item_spacing'] = $item_spacing;

        return $this;
    }

    /**
     * Gets item_reverse_z_index
     *
     * @return bool|null
     */
    public function getItemReverseZIndex()
    {
        return $this->container['item_reverse_z_index'];
    }

    /**
     * Sets item_reverse_z_index
     *
     * @param bool|null $item_reverse_z_index Determines the canvas stacking order of layers in this frame. When true, the first layer will be draw on top. This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setItemReverseZIndex($item_reverse_z_index)
    {
        if (is_null($item_reverse_z_index)) {
            throw new \InvalidArgumentException('non-nullable item_reverse_z_index cannot be null');
        }
        $this->container['item_reverse_z_index'] = $item_reverse_z_index;

        return $this;
    }

    /**
     * Gets strokes_included_in_layout
     *
     * @return bool|null
     */
    public function getStrokesIncludedInLayout()
    {
        return $this->container['strokes_included_in_layout'];
    }

    /**
     * Sets strokes_included_in_layout
     *
     * @param bool|null $strokes_included_in_layout Determines whether strokes are included in layout calculations. When true, auto-layout frames behave like css \"box-sizing: border-box\". This property is only applicable for auto-layout frames.
     *
     * @return self
     */
    public function setStrokesIncludedInLayout($strokes_included_in_layout)
    {
        if (is_null($strokes_included_in_layout)) {
            throw new \InvalidArgumentException('non-nullable strokes_included_in_layout cannot be null');
        }
        $this->container['strokes_included_in_layout'] = $strokes_included_in_layout;

        return $this;
    }

    /**
     * Gets layout_wrap
     *
     * @return string|null
     */
    public function getLayoutWrap()
    {
        return $this->container['layout_wrap'];
    }

    /**
     * Sets layout_wrap
     *
     * @param string|null $layout_wrap Whether this auto-layout frame has wrapping enabled.
     *
     * @return self
     */
    public function setLayoutWrap($layout_wrap)
    {
        if (is_null($layout_wrap)) {
            throw new \InvalidArgumentException('non-nullable layout_wrap cannot be null');
        }
        $allowedValues = $this->getLayoutWrapAllowableValues();
        if (!in_array($layout_wrap, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'layout_wrap', must be one of '%s'",
                    $layout_wrap,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['layout_wrap'] = $layout_wrap;

        return $this;
    }

    /**
     * Gets counter_axis_spacing
     *
     * @return float|null
     */
    public function getCounterAxisSpacing()
    {
        return $this->container['counter_axis_spacing'];
    }

    /**
     * Sets counter_axis_spacing
     *
     * @param float|null $counter_axis_spacing The distance between wrapped tracks of an auto-layout frame. This property is only applicable for auto-layout frames with `layoutWrap: \"WRAP\"`
     *
     * @return self
     */
    public function setCounterAxisSpacing($counter_axis_spacing)
    {
        if (is_null($counter_axis_spacing)) {
            throw new \InvalidArgumentException('non-nullable counter_axis_spacing cannot be null');
        }
        $this->container['counter_axis_spacing'] = $counter_axis_spacing;

        return $this;
    }

    /**
     * Gets counter_axis_align_content
     *
     * @return string|null
     */
    public function getCounterAxisAlignContent()
    {
        return $this->container['counter_axis_align_content'];
    }

    /**
     * Sets counter_axis_align_content
     *
     * @param string|null $counter_axis_align_content Determines how the auto-layout frame’s wrapped tracks should be aligned in the counter axis direction. This property is only applicable for auto-layout frames with `layoutWrap: \"WRAP\"`.
     *
     * @return self
     */
    public function setCounterAxisAlignContent($counter_axis_align_content)
    {
        if (is_null($counter_axis_align_content)) {
            throw new \InvalidArgumentException('non-nullable counter_axis_align_content cannot be null');
        }
        $allowedValues = $this->getCounterAxisAlignContentAllowableValues();
        if (!in_array($counter_axis_align_content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'counter_axis_align_content', must be one of '%s'",
                    $counter_axis_align_content,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['counter_axis_align_content'] = $counter_axis_align_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


