<?php
/**
 * MultitoneNoiseEffect
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MultitoneNoiseEffect Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MultitoneNoiseEffect implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MultitoneNoiseEffect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'color' => '\OpenAPI\Client\Model\RGBA',
        'visible' => 'bool',
        'blend_mode' => '\OpenAPI\Client\Model\BlendMode',
        'noise_size' => 'float',
        'density' => 'float',
        'noise_type' => 'string',
        'opacity' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'color' => null,
        'visible' => null,
        'blend_mode' => null,
        'noise_size' => null,
        'density' => null,
        'noise_type' => null,
        'opacity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'color' => false,
        'visible' => false,
        'blend_mode' => false,
        'noise_size' => false,
        'density' => false,
        'noise_type' => false,
        'opacity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'color' => 'color',
        'visible' => 'visible',
        'blend_mode' => 'blendMode',
        'noise_size' => 'noiseSize',
        'density' => 'density',
        'noise_type' => 'noiseType',
        'opacity' => 'opacity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'color' => 'setColor',
        'visible' => 'setVisible',
        'blend_mode' => 'setBlendMode',
        'noise_size' => 'setNoiseSize',
        'density' => 'setDensity',
        'noise_type' => 'setNoiseType',
        'opacity' => 'setOpacity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'color' => 'getColor',
        'visible' => 'getVisible',
        'blend_mode' => 'getBlendMode',
        'noise_size' => 'getNoiseSize',
        'density' => 'getDensity',
        'noise_type' => 'getNoiseType',
        'opacity' => 'getOpacity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_NOISE = 'NOISE';
    public const NOISE_TYPE_MULTITONE = 'MULTITONE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NOISE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNoiseTypeAllowableValues()
    {
        return [
            self::NOISE_TYPE_MULTITONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('blend_mode', $data ?? [], null);
        $this->setIfExists('noise_size', $data ?? [], null);
        $this->setIfExists('density', $data ?? [], null);
        $this->setIfExists('noise_type', $data ?? [], null);
        $this->setIfExists('opacity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalidProperties[] = "'visible' can't be null";
        }
        if ($this->container['blend_mode'] === null) {
            $invalidProperties[] = "'blend_mode' can't be null";
        }
        if ($this->container['noise_size'] === null) {
            $invalidProperties[] = "'noise_size' can't be null";
        }
        if ($this->container['density'] === null) {
            $invalidProperties[] = "'density' can't be null";
        }
        if ($this->container['noise_type'] === null) {
            $invalidProperties[] = "'noise_type' can't be null";
        }
        $allowedValues = $this->getNoiseTypeAllowableValues();
        if (!is_null($this->container['noise_type']) && !in_array($this->container['noise_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'noise_type', must be one of '%s'",
                $this->container['noise_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['opacity'] === null) {
            $invalidProperties[] = "'opacity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The string literal 'NOISE' representing the effect's type. Always check the type before reading other properties.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets color
     *
     * @return \OpenAPI\Client\Model\RGBA
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param \OpenAPI\Client\Model\RGBA $color The color of the noise effect
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible Whether the noise effect is visible.
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets blend_mode
     *
     * @return \OpenAPI\Client\Model\BlendMode
     */
    public function getBlendMode()
    {
        return $this->container['blend_mode'];
    }

    /**
     * Sets blend_mode
     *
     * @param \OpenAPI\Client\Model\BlendMode $blend_mode Blend mode of the noise effect
     *
     * @return self
     */
    public function setBlendMode($blend_mode)
    {
        if (is_null($blend_mode)) {
            throw new \InvalidArgumentException('non-nullable blend_mode cannot be null');
        }
        $this->container['blend_mode'] = $blend_mode;

        return $this;
    }

    /**
     * Gets noise_size
     *
     * @return float
     */
    public function getNoiseSize()
    {
        return $this->container['noise_size'];
    }

    /**
     * Sets noise_size
     *
     * @param float $noise_size The size of the noise effect
     *
     * @return self
     */
    public function setNoiseSize($noise_size)
    {
        if (is_null($noise_size)) {
            throw new \InvalidArgumentException('non-nullable noise_size cannot be null');
        }
        $this->container['noise_size'] = $noise_size;

        return $this;
    }

    /**
     * Gets density
     *
     * @return float
     */
    public function getDensity()
    {
        return $this->container['density'];
    }

    /**
     * Sets density
     *
     * @param float $density The density of the noise effect
     *
     * @return self
     */
    public function setDensity($density)
    {
        if (is_null($density)) {
            throw new \InvalidArgumentException('non-nullable density cannot be null');
        }
        $this->container['density'] = $density;

        return $this;
    }

    /**
     * Gets noise_type
     *
     * @return string
     */
    public function getNoiseType()
    {
        return $this->container['noise_type'];
    }

    /**
     * Sets noise_type
     *
     * @param string $noise_type The string literal 'MULTITONE' representing the noise type.
     *
     * @return self
     */
    public function setNoiseType($noise_type)
    {
        if (is_null($noise_type)) {
            throw new \InvalidArgumentException('non-nullable noise_type cannot be null');
        }
        $allowedValues = $this->getNoiseTypeAllowableValues();
        if (!in_array($noise_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'noise_type', must be one of '%s'",
                    $noise_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['noise_type'] = $noise_type;

        return $this;
    }

    /**
     * Gets opacity
     *
     * @return float
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     *
     * @param float $opacity The opacity of the noise effect
     *
     * @return self
     */
    public function setOpacity($opacity)
    {
        if (is_null($opacity)) {
            throw new \InvalidArgumentException('non-nullable opacity cannot be null');
        }
        $this->container['opacity'] = $opacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


