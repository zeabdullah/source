<?php
/**
 * ImageFilters
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageFilters Class Doc Comment
 *
 * @category Class
 * @description Image filters to apply to the node.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImageFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'exposure' => 'float',
        'contrast' => 'float',
        'saturation' => 'float',
        'temperature' => 'float',
        'tint' => 'float',
        'highlights' => 'float',
        'shadows' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'exposure' => null,
        'contrast' => null,
        'saturation' => null,
        'temperature' => null,
        'tint' => null,
        'highlights' => null,
        'shadows' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'exposure' => false,
        'contrast' => false,
        'saturation' => false,
        'temperature' => false,
        'tint' => false,
        'highlights' => false,
        'shadows' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exposure' => 'exposure',
        'contrast' => 'contrast',
        'saturation' => 'saturation',
        'temperature' => 'temperature',
        'tint' => 'tint',
        'highlights' => 'highlights',
        'shadows' => 'shadows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exposure' => 'setExposure',
        'contrast' => 'setContrast',
        'saturation' => 'setSaturation',
        'temperature' => 'setTemperature',
        'tint' => 'setTint',
        'highlights' => 'setHighlights',
        'shadows' => 'setShadows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exposure' => 'getExposure',
        'contrast' => 'getContrast',
        'saturation' => 'getSaturation',
        'temperature' => 'getTemperature',
        'tint' => 'getTint',
        'highlights' => 'getHighlights',
        'shadows' => 'getShadows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('exposure', $data ?? [], 0);
        $this->setIfExists('contrast', $data ?? [], 0);
        $this->setIfExists('saturation', $data ?? [], 0);
        $this->setIfExists('temperature', $data ?? [], 0);
        $this->setIfExists('tint', $data ?? [], 0);
        $this->setIfExists('highlights', $data ?? [], 0);
        $this->setIfExists('shadows', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exposure
     *
     * @return float|null
     */
    public function getExposure()
    {
        return $this->container['exposure'];
    }

    /**
     * Sets exposure
     *
     * @param float|null $exposure exposure
     *
     * @return self
     */
    public function setExposure($exposure)
    {
        if (is_null($exposure)) {
            throw new \InvalidArgumentException('non-nullable exposure cannot be null');
        }
        $this->container['exposure'] = $exposure;

        return $this;
    }

    /**
     * Gets contrast
     *
     * @return float|null
     */
    public function getContrast()
    {
        return $this->container['contrast'];
    }

    /**
     * Sets contrast
     *
     * @param float|null $contrast contrast
     *
     * @return self
     */
    public function setContrast($contrast)
    {
        if (is_null($contrast)) {
            throw new \InvalidArgumentException('non-nullable contrast cannot be null');
        }
        $this->container['contrast'] = $contrast;

        return $this;
    }

    /**
     * Gets saturation
     *
     * @return float|null
     */
    public function getSaturation()
    {
        return $this->container['saturation'];
    }

    /**
     * Sets saturation
     *
     * @param float|null $saturation saturation
     *
     * @return self
     */
    public function setSaturation($saturation)
    {
        if (is_null($saturation)) {
            throw new \InvalidArgumentException('non-nullable saturation cannot be null');
        }
        $this->container['saturation'] = $saturation;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature temperature
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets tint
     *
     * @return float|null
     */
    public function getTint()
    {
        return $this->container['tint'];
    }

    /**
     * Sets tint
     *
     * @param float|null $tint tint
     *
     * @return self
     */
    public function setTint($tint)
    {
        if (is_null($tint)) {
            throw new \InvalidArgumentException('non-nullable tint cannot be null');
        }
        $this->container['tint'] = $tint;

        return $this;
    }

    /**
     * Gets highlights
     *
     * @return float|null
     */
    public function getHighlights()
    {
        return $this->container['highlights'];
    }

    /**
     * Sets highlights
     *
     * @param float|null $highlights highlights
     *
     * @return self
     */
    public function setHighlights($highlights)
    {
        if (is_null($highlights)) {
            throw new \InvalidArgumentException('non-nullable highlights cannot be null');
        }
        $this->container['highlights'] = $highlights;

        return $this;
    }

    /**
     * Gets shadows
     *
     * @return float|null
     */
    public function getShadows()
    {
        return $this->container['shadows'];
    }

    /**
     * Sets shadows
     *
     * @param float|null $shadows shadows
     *
     * @return self
     */
    public function setShadows($shadows)
    {
        if (is_null($shadows)) {
            throw new \InvalidArgumentException('non-nullable shadows cannot be null');
        }
        $this->container['shadows'] = $shadows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


