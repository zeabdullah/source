<?php
/**
 * NodeAction
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NodeAction Class Doc Comment
 *
 * @category Class
 * @description An action that navigates to a specific node in the Figma viewer.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NodeAction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NodeAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'destination_id' => 'string',
        'navigation' => '\OpenAPI\Client\Model\Navigation',
        'transition' => '\OpenAPI\Client\Model\Transition',
        'preserve_scroll_position' => 'bool',
        'overlay_relative_position' => '\OpenAPI\Client\Model\Vector',
        'reset_video_position' => 'bool',
        'reset_scroll_position' => 'bool',
        'reset_interactive_components' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'destination_id' => null,
        'navigation' => null,
        'transition' => null,
        'preserve_scroll_position' => null,
        'overlay_relative_position' => null,
        'reset_video_position' => null,
        'reset_scroll_position' => null,
        'reset_interactive_components' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'destination_id' => true,
        'navigation' => false,
        'transition' => true,
        'preserve_scroll_position' => false,
        'overlay_relative_position' => false,
        'reset_video_position' => false,
        'reset_scroll_position' => false,
        'reset_interactive_components' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'destination_id' => 'destinationId',
        'navigation' => 'navigation',
        'transition' => 'transition',
        'preserve_scroll_position' => 'preserveScrollPosition',
        'overlay_relative_position' => 'overlayRelativePosition',
        'reset_video_position' => 'resetVideoPosition',
        'reset_scroll_position' => 'resetScrollPosition',
        'reset_interactive_components' => 'resetInteractiveComponents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'destination_id' => 'setDestinationId',
        'navigation' => 'setNavigation',
        'transition' => 'setTransition',
        'preserve_scroll_position' => 'setPreserveScrollPosition',
        'overlay_relative_position' => 'setOverlayRelativePosition',
        'reset_video_position' => 'setResetVideoPosition',
        'reset_scroll_position' => 'setResetScrollPosition',
        'reset_interactive_components' => 'setResetInteractiveComponents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'destination_id' => 'getDestinationId',
        'navigation' => 'getNavigation',
        'transition' => 'getTransition',
        'preserve_scroll_position' => 'getPreserveScrollPosition',
        'overlay_relative_position' => 'getOverlayRelativePosition',
        'reset_video_position' => 'getResetVideoPosition',
        'reset_scroll_position' => 'getResetScrollPosition',
        'reset_interactive_components' => 'getResetInteractiveComponents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_NODE = 'NODE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NODE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('destination_id', $data ?? [], null);
        $this->setIfExists('navigation', $data ?? [], null);
        $this->setIfExists('transition', $data ?? [], null);
        $this->setIfExists('preserve_scroll_position', $data ?? [], null);
        $this->setIfExists('overlay_relative_position', $data ?? [], null);
        $this->setIfExists('reset_video_position', $data ?? [], null);
        $this->setIfExists('reset_scroll_position', $data ?? [], null);
        $this->setIfExists('reset_interactive_components', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['destination_id'] === null) {
            $invalidProperties[] = "'destination_id' can't be null";
        }
        if ($this->container['navigation'] === null) {
            $invalidProperties[] = "'navigation' can't be null";
        }
        if ($this->container['transition'] === null) {
            $invalidProperties[] = "'transition' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets destination_id
     *
     * @return string
     */
    public function getDestinationId()
    {
        return $this->container['destination_id'];
    }

    /**
     * Sets destination_id
     *
     * @param string $destination_id destination_id
     *
     * @return self
     */
    public function setDestinationId($destination_id)
    {
        if (is_null($destination_id)) {
            array_push($this->openAPINullablesSetToNull, 'destination_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_id'] = $destination_id;

        return $this;
    }

    /**
     * Gets navigation
     *
     * @return \OpenAPI\Client\Model\Navigation
     */
    public function getNavigation()
    {
        return $this->container['navigation'];
    }

    /**
     * Sets navigation
     *
     * @param \OpenAPI\Client\Model\Navigation $navigation navigation
     *
     * @return self
     */
    public function setNavigation($navigation)
    {
        if (is_null($navigation)) {
            throw new \InvalidArgumentException('non-nullable navigation cannot be null');
        }
        $this->container['navigation'] = $navigation;

        return $this;
    }

    /**
     * Gets transition
     *
     * @return \OpenAPI\Client\Model\Transition
     */
    public function getTransition()
    {
        return $this->container['transition'];
    }

    /**
     * Sets transition
     *
     * @param \OpenAPI\Client\Model\Transition $transition transition
     *
     * @return self
     */
    public function setTransition($transition)
    {
        if (is_null($transition)) {
            array_push($this->openAPINullablesSetToNull, 'transition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transition'] = $transition;

        return $this;
    }

    /**
     * Gets preserve_scroll_position
     *
     * @return bool|null
     */
    public function getPreserveScrollPosition()
    {
        return $this->container['preserve_scroll_position'];
    }

    /**
     * Sets preserve_scroll_position
     *
     * @param bool|null $preserve_scroll_position Whether the scroll offsets of any scrollable elements in the current screen or overlay are preserved when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
     *
     * @return self
     */
    public function setPreserveScrollPosition($preserve_scroll_position)
    {
        if (is_null($preserve_scroll_position)) {
            throw new \InvalidArgumentException('non-nullable preserve_scroll_position cannot be null');
        }
        $this->container['preserve_scroll_position'] = $preserve_scroll_position;

        return $this;
    }

    /**
     * Gets overlay_relative_position
     *
     * @return \OpenAPI\Client\Model\Vector|null
     */
    public function getOverlayRelativePosition()
    {
        return $this->container['overlay_relative_position'];
    }

    /**
     * Sets overlay_relative_position
     *
     * @param \OpenAPI\Client\Model\Vector|null $overlay_relative_position Applicable only when `navigation` is `\"OVERLAY\"` and the destination is a frame with `overlayPosition` equal to `\"MANUAL\"`. This value represents the offset by which the overlay is opened relative to this node.
     *
     * @return self
     */
    public function setOverlayRelativePosition($overlay_relative_position)
    {
        if (is_null($overlay_relative_position)) {
            throw new \InvalidArgumentException('non-nullable overlay_relative_position cannot be null');
        }
        $this->container['overlay_relative_position'] = $overlay_relative_position;

        return $this;
    }

    /**
     * Gets reset_video_position
     *
     * @return bool|null
     */
    public function getResetVideoPosition()
    {
        return $this->container['reset_video_position'];
    }

    /**
     * Sets reset_video_position
     *
     * @param bool|null $reset_video_position When true, all videos within the destination frame will reset their memorized playback position to 00:00 before starting to play.
     *
     * @return self
     */
    public function setResetVideoPosition($reset_video_position)
    {
        if (is_null($reset_video_position)) {
            throw new \InvalidArgumentException('non-nullable reset_video_position cannot be null');
        }
        $this->container['reset_video_position'] = $reset_video_position;

        return $this;
    }

    /**
     * Gets reset_scroll_position
     *
     * @return bool|null
     */
    public function getResetScrollPosition()
    {
        return $this->container['reset_scroll_position'];
    }

    /**
     * Sets reset_scroll_position
     *
     * @param bool|null $reset_scroll_position Whether the scroll offsets of any scrollable elements in the current screen or overlay reset when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
     *
     * @return self
     */
    public function setResetScrollPosition($reset_scroll_position)
    {
        if (is_null($reset_scroll_position)) {
            throw new \InvalidArgumentException('non-nullable reset_scroll_position cannot be null');
        }
        $this->container['reset_scroll_position'] = $reset_scroll_position;

        return $this;
    }

    /**
     * Gets reset_interactive_components
     *
     * @return bool|null
     */
    public function getResetInteractiveComponents()
    {
        return $this->container['reset_interactive_components'];
    }

    /**
     * Sets reset_interactive_components
     *
     * @param bool|null $reset_interactive_components Whether the state of any interactive components in the current screen or overlay reset when navigating to the destination. This is applicable if there are interactive components in the destination frame.
     *
     * @return self
     */
    public function setResetInteractiveComponents($reset_interactive_components)
    {
        if (is_null($reset_interactive_components)) {
            throw new \InvalidArgumentException('non-nullable reset_interactive_components cannot be null');
        }
        $this->container['reset_interactive_components'] = $reset_interactive_components;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


