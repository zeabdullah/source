<?php
/**
 * VariableDataValue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VariableDataValue Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VariableDataValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VariableData_value';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'r' => 'float',
        'g' => 'float',
        'b' => 'float',
        'a' => 'float',
        'type' => 'string',
        'id' => 'string',
        'expression_function' => '\OpenAPI\Client\Model\ExpressionFunction',
        'expression_arguments' => '\OpenAPI\Client\Model\VariableData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'r' => null,
        'g' => null,
        'b' => null,
        'a' => null,
        'type' => null,
        'id' => null,
        'expression_function' => null,
        'expression_arguments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'r' => false,
        'g' => false,
        'b' => false,
        'a' => false,
        'type' => false,
        'id' => false,
        'expression_function' => false,
        'expression_arguments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'r' => 'r',
        'g' => 'g',
        'b' => 'b',
        'a' => 'a',
        'type' => 'type',
        'id' => 'id',
        'expression_function' => 'expressionFunction',
        'expression_arguments' => 'expressionArguments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'r' => 'setR',
        'g' => 'setG',
        'b' => 'setB',
        'a' => 'setA',
        'type' => 'setType',
        'id' => 'setId',
        'expression_function' => 'setExpressionFunction',
        'expression_arguments' => 'setExpressionArguments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'r' => 'getR',
        'g' => 'getG',
        'b' => 'getB',
        'a' => 'getA',
        'type' => 'getType',
        'id' => 'getId',
        'expression_function' => 'getExpressionFunction',
        'expression_arguments' => 'getExpressionArguments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_VARIABLE_ALIAS = 'VARIABLE_ALIAS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_VARIABLE_ALIAS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('r', $data ?? [], null);
        $this->setIfExists('g', $data ?? [], null);
        $this->setIfExists('b', $data ?? [], null);
        $this->setIfExists('a', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('expression_function', $data ?? [], null);
        $this->setIfExists('expression_arguments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['r'] === null) {
            $invalidProperties[] = "'r' can't be null";
        }
        if (($this->container['r'] > 1)) {
            $invalidProperties[] = "invalid value for 'r', must be smaller than or equal to 1.";
        }

        if (($this->container['r'] < 0)) {
            $invalidProperties[] = "invalid value for 'r', must be bigger than or equal to 0.";
        }

        if ($this->container['g'] === null) {
            $invalidProperties[] = "'g' can't be null";
        }
        if (($this->container['g'] > 1)) {
            $invalidProperties[] = "invalid value for 'g', must be smaller than or equal to 1.";
        }

        if (($this->container['g'] < 0)) {
            $invalidProperties[] = "invalid value for 'g', must be bigger than or equal to 0.";
        }

        if ($this->container['b'] === null) {
            $invalidProperties[] = "'b' can't be null";
        }
        if (($this->container['b'] > 1)) {
            $invalidProperties[] = "invalid value for 'b', must be smaller than or equal to 1.";
        }

        if (($this->container['b'] < 0)) {
            $invalidProperties[] = "invalid value for 'b', must be bigger than or equal to 0.";
        }

        if ($this->container['a'] === null) {
            $invalidProperties[] = "'a' can't be null";
        }
        if (($this->container['a'] > 1)) {
            $invalidProperties[] = "invalid value for 'a', must be smaller than or equal to 1.";
        }

        if (($this->container['a'] < 0)) {
            $invalidProperties[] = "invalid value for 'a', must be bigger than or equal to 0.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['expression_function'] === null) {
            $invalidProperties[] = "'expression_function' can't be null";
        }
        if ($this->container['expression_arguments'] === null) {
            $invalidProperties[] = "'expression_arguments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets r
     *
     * @return float
     */
    public function getR()
    {
        return $this->container['r'];
    }

    /**
     * Sets r
     *
     * @param float $r Red channel value, between 0 and 1.
     *
     * @return self
     */
    public function setR($r)
    {
        if (is_null($r)) {
            throw new \InvalidArgumentException('non-nullable r cannot be null');
        }

        if (($r > 1)) {
            throw new \InvalidArgumentException('invalid value for $r when calling VariableDataValue., must be smaller than or equal to 1.');
        }
        if (($r < 0)) {
            throw new \InvalidArgumentException('invalid value for $r when calling VariableDataValue., must be bigger than or equal to 0.');
        }

        $this->container['r'] = $r;

        return $this;
    }

    /**
     * Gets g
     *
     * @return float
     */
    public function getG()
    {
        return $this->container['g'];
    }

    /**
     * Sets g
     *
     * @param float $g Green channel value, between 0 and 1.
     *
     * @return self
     */
    public function setG($g)
    {
        if (is_null($g)) {
            throw new \InvalidArgumentException('non-nullable g cannot be null');
        }

        if (($g > 1)) {
            throw new \InvalidArgumentException('invalid value for $g when calling VariableDataValue., must be smaller than or equal to 1.');
        }
        if (($g < 0)) {
            throw new \InvalidArgumentException('invalid value for $g when calling VariableDataValue., must be bigger than or equal to 0.');
        }

        $this->container['g'] = $g;

        return $this;
    }

    /**
     * Gets b
     *
     * @return float
     */
    public function getB()
    {
        return $this->container['b'];
    }

    /**
     * Sets b
     *
     * @param float $b Blue channel value, between 0 and 1.
     *
     * @return self
     */
    public function setB($b)
    {
        if (is_null($b)) {
            throw new \InvalidArgumentException('non-nullable b cannot be null');
        }

        if (($b > 1)) {
            throw new \InvalidArgumentException('invalid value for $b when calling VariableDataValue., must be smaller than or equal to 1.');
        }
        if (($b < 0)) {
            throw new \InvalidArgumentException('invalid value for $b when calling VariableDataValue., must be bigger than or equal to 0.');
        }

        $this->container['b'] = $b;

        return $this;
    }

    /**
     * Gets a
     *
     * @return float
     */
    public function getA()
    {
        return $this->container['a'];
    }

    /**
     * Sets a
     *
     * @param float $a Alpha channel value, between 0 and 1.
     *
     * @return self
     */
    public function setA($a)
    {
        if (is_null($a)) {
            throw new \InvalidArgumentException('non-nullable a cannot be null');
        }

        if (($a > 1)) {
            throw new \InvalidArgumentException('invalid value for $a when calling VariableDataValue., must be smaller than or equal to 1.');
        }
        if (($a < 0)) {
            throw new \InvalidArgumentException('invalid value for $a when calling VariableDataValue., must be bigger than or equal to 0.');
        }

        $this->container['a'] = $a;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the variable that the current variable is aliased to. This variable can be a local or remote variable, and both can be retrieved via the GET /v1/files/:file_key/variables/local endpoint.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets expression_function
     *
     * @return \OpenAPI\Client\Model\ExpressionFunction
     */
    public function getExpressionFunction()
    {
        return $this->container['expression_function'];
    }

    /**
     * Sets expression_function
     *
     * @param \OpenAPI\Client\Model\ExpressionFunction $expression_function expression_function
     *
     * @return self
     */
    public function setExpressionFunction($expression_function)
    {
        if (is_null($expression_function)) {
            throw new \InvalidArgumentException('non-nullable expression_function cannot be null');
        }
        $this->container['expression_function'] = $expression_function;

        return $this;
    }

    /**
     * Gets expression_arguments
     *
     * @return \OpenAPI\Client\Model\VariableData[]
     */
    public function getExpressionArguments()
    {
        return $this->container['expression_arguments'];
    }

    /**
     * Sets expression_arguments
     *
     * @param \OpenAPI\Client\Model\VariableData[] $expression_arguments expression_arguments
     *
     * @return self
     */
    public function setExpressionArguments($expression_arguments)
    {
        if (is_null($expression_arguments)) {
            throw new \InvalidArgumentException('non-nullable expression_arguments cannot be null');
        }
        $this->container['expression_arguments'] = $expression_arguments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


