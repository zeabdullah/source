<?php
/**
 * LibraryAnalyticsVariableUsagesByAsset
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LibraryAnalyticsVariableUsagesByAsset Class Doc Comment
 *
 * @category Class
 * @description Library analytics variable usage data broken down by component.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LibraryAnalyticsVariableUsagesByAsset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LibraryAnalyticsVariableUsagesByAsset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'variable_key' => 'string',
        'variable_name' => 'string',
        'variable_type' => 'string',
        'collection_key' => 'string',
        'collection_name' => 'string',
        'usages' => 'float',
        'teams_using' => 'float',
        'files_using' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'variable_key' => null,
        'variable_name' => null,
        'variable_type' => null,
        'collection_key' => null,
        'collection_name' => null,
        'usages' => null,
        'teams_using' => null,
        'files_using' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'variable_key' => false,
        'variable_name' => false,
        'variable_type' => false,
        'collection_key' => false,
        'collection_name' => false,
        'usages' => false,
        'teams_using' => false,
        'files_using' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'variable_key' => 'variable_key',
        'variable_name' => 'variable_name',
        'variable_type' => 'variable_type',
        'collection_key' => 'collection_key',
        'collection_name' => 'collection_name',
        'usages' => 'usages',
        'teams_using' => 'teams_using',
        'files_using' => 'files_using'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'variable_key' => 'setVariableKey',
        'variable_name' => 'setVariableName',
        'variable_type' => 'setVariableType',
        'collection_key' => 'setCollectionKey',
        'collection_name' => 'setCollectionName',
        'usages' => 'setUsages',
        'teams_using' => 'setTeamsUsing',
        'files_using' => 'setFilesUsing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'variable_key' => 'getVariableKey',
        'variable_name' => 'getVariableName',
        'variable_type' => 'getVariableType',
        'collection_key' => 'getCollectionKey',
        'collection_name' => 'getCollectionName',
        'usages' => 'getUsages',
        'teams_using' => 'getTeamsUsing',
        'files_using' => 'getFilesUsing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('variable_key', $data ?? [], null);
        $this->setIfExists('variable_name', $data ?? [], null);
        $this->setIfExists('variable_type', $data ?? [], null);
        $this->setIfExists('collection_key', $data ?? [], null);
        $this->setIfExists('collection_name', $data ?? [], null);
        $this->setIfExists('usages', $data ?? [], null);
        $this->setIfExists('teams_using', $data ?? [], null);
        $this->setIfExists('files_using', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['variable_key'] === null) {
            $invalidProperties[] = "'variable_key' can't be null";
        }
        if ($this->container['variable_name'] === null) {
            $invalidProperties[] = "'variable_name' can't be null";
        }
        if ($this->container['variable_type'] === null) {
            $invalidProperties[] = "'variable_type' can't be null";
        }
        if ($this->container['collection_key'] === null) {
            $invalidProperties[] = "'collection_key' can't be null";
        }
        if ($this->container['collection_name'] === null) {
            $invalidProperties[] = "'collection_name' can't be null";
        }
        if ($this->container['usages'] === null) {
            $invalidProperties[] = "'usages' can't be null";
        }
        if ($this->container['teams_using'] === null) {
            $invalidProperties[] = "'teams_using' can't be null";
        }
        if ($this->container['files_using'] === null) {
            $invalidProperties[] = "'files_using' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets variable_key
     *
     * @return string
     */
    public function getVariableKey()
    {
        return $this->container['variable_key'];
    }

    /**
     * Sets variable_key
     *
     * @param string $variable_key Unique, stable id of the variable.
     *
     * @return self
     */
    public function setVariableKey($variable_key)
    {
        if (is_null($variable_key)) {
            throw new \InvalidArgumentException('non-nullable variable_key cannot be null');
        }
        $this->container['variable_key'] = $variable_key;

        return $this;
    }

    /**
     * Gets variable_name
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     *
     * @param string $variable_name The name of the variable.
     *
     * @return self
     */
    public function setVariableName($variable_name)
    {
        if (is_null($variable_name)) {
            throw new \InvalidArgumentException('non-nullable variable_name cannot be null');
        }
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variable_type
     *
     * @return string
     */
    public function getVariableType()
    {
        return $this->container['variable_type'];
    }

    /**
     * Sets variable_type
     *
     * @param string $variable_type The type of the variable.
     *
     * @return self
     */
    public function setVariableType($variable_type)
    {
        if (is_null($variable_type)) {
            throw new \InvalidArgumentException('non-nullable variable_type cannot be null');
        }
        $this->container['variable_type'] = $variable_type;

        return $this;
    }

    /**
     * Gets collection_key
     *
     * @return string
     */
    public function getCollectionKey()
    {
        return $this->container['collection_key'];
    }

    /**
     * Sets collection_key
     *
     * @param string $collection_key Unique, stable id of the collection the variable belongs to.
     *
     * @return self
     */
    public function setCollectionKey($collection_key)
    {
        if (is_null($collection_key)) {
            throw new \InvalidArgumentException('non-nullable collection_key cannot be null');
        }
        $this->container['collection_key'] = $collection_key;

        return $this;
    }

    /**
     * Gets collection_name
     *
     * @return string
     */
    public function getCollectionName()
    {
        return $this->container['collection_name'];
    }

    /**
     * Sets collection_name
     *
     * @param string $collection_name The name of the collection the variable belongs to.
     *
     * @return self
     */
    public function setCollectionName($collection_name)
    {
        if (is_null($collection_name)) {
            throw new \InvalidArgumentException('non-nullable collection_name cannot be null');
        }
        $this->container['collection_name'] = $collection_name;

        return $this;
    }

    /**
     * Gets usages
     *
     * @return float
     */
    public function getUsages()
    {
        return $this->container['usages'];
    }

    /**
     * Sets usages
     *
     * @param float $usages The number of usages of the variable within the organization.
     *
     * @return self
     */
    public function setUsages($usages)
    {
        if (is_null($usages)) {
            throw new \InvalidArgumentException('non-nullable usages cannot be null');
        }
        $this->container['usages'] = $usages;

        return $this;
    }

    /**
     * Gets teams_using
     *
     * @return float
     */
    public function getTeamsUsing()
    {
        return $this->container['teams_using'];
    }

    /**
     * Sets teams_using
     *
     * @param float $teams_using The number of teams using the variable within the organization.
     *
     * @return self
     */
    public function setTeamsUsing($teams_using)
    {
        if (is_null($teams_using)) {
            throw new \InvalidArgumentException('non-nullable teams_using cannot be null');
        }
        $this->container['teams_using'] = $teams_using;

        return $this;
    }

    /**
     * Gets files_using
     *
     * @return float
     */
    public function getFilesUsing()
    {
        return $this->container['files_using'];
    }

    /**
     * Sets files_using
     *
     * @param float $files_using The number of files using the variable within the organization.
     *
     * @return self
     */
    public function setFilesUsing($files_using)
    {
        if (is_null($files_using)) {
            throw new \InvalidArgumentException('non-nullable files_using cannot be null');
        }
        $this->container['files_using'] = $files_using;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


