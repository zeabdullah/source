<?php
/**
 * LocalVariable
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.33.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocalVariable Class Doc Comment
 *
 * @category Class
 * @description A Variable is a single design token that defines values for each of the modes in its VariableCollection. These values can be applied to various kinds of design properties.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocalVariable implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LocalVariable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'key' => 'string',
        'variable_collection_id' => 'string',
        'resolved_type' => 'string',
        'values_by_mode' => 'array<string,\OpenAPI\Client\Model\LocalVariableValuesByModeValue>',
        'remote' => 'bool',
        'description' => 'string',
        'hidden_from_publishing' => 'bool',
        'scopes' => '\OpenAPI\Client\Model\VariableScope[]',
        'code_syntax' => '\OpenAPI\Client\Model\VariableCodeSyntax',
        'deleted_but_referenced' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'key' => null,
        'variable_collection_id' => null,
        'resolved_type' => null,
        'values_by_mode' => null,
        'remote' => null,
        'description' => null,
        'hidden_from_publishing' => null,
        'scopes' => null,
        'code_syntax' => null,
        'deleted_but_referenced' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'key' => false,
        'variable_collection_id' => false,
        'resolved_type' => false,
        'values_by_mode' => false,
        'remote' => false,
        'description' => false,
        'hidden_from_publishing' => false,
        'scopes' => false,
        'code_syntax' => false,
        'deleted_but_referenced' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'key' => 'key',
        'variable_collection_id' => 'variableCollectionId',
        'resolved_type' => 'resolvedType',
        'values_by_mode' => 'valuesByMode',
        'remote' => 'remote',
        'description' => 'description',
        'hidden_from_publishing' => 'hiddenFromPublishing',
        'scopes' => 'scopes',
        'code_syntax' => 'codeSyntax',
        'deleted_but_referenced' => 'deletedButReferenced'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'key' => 'setKey',
        'variable_collection_id' => 'setVariableCollectionId',
        'resolved_type' => 'setResolvedType',
        'values_by_mode' => 'setValuesByMode',
        'remote' => 'setRemote',
        'description' => 'setDescription',
        'hidden_from_publishing' => 'setHiddenFromPublishing',
        'scopes' => 'setScopes',
        'code_syntax' => 'setCodeSyntax',
        'deleted_but_referenced' => 'setDeletedButReferenced'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'key' => 'getKey',
        'variable_collection_id' => 'getVariableCollectionId',
        'resolved_type' => 'getResolvedType',
        'values_by_mode' => 'getValuesByMode',
        'remote' => 'getRemote',
        'description' => 'getDescription',
        'hidden_from_publishing' => 'getHiddenFromPublishing',
        'scopes' => 'getScopes',
        'code_syntax' => 'getCodeSyntax',
        'deleted_but_referenced' => 'getDeletedButReferenced'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RESOLVED_TYPE_BOOLEAN = 'BOOLEAN';
    public const RESOLVED_TYPE_FLOAT = 'FLOAT';
    public const RESOLVED_TYPE_STRING = 'STRING';
    public const RESOLVED_TYPE_COLOR = 'COLOR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolvedTypeAllowableValues()
    {
        return [
            self::RESOLVED_TYPE_BOOLEAN,
            self::RESOLVED_TYPE_FLOAT,
            self::RESOLVED_TYPE_STRING,
            self::RESOLVED_TYPE_COLOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('variable_collection_id', $data ?? [], null);
        $this->setIfExists('resolved_type', $data ?? [], null);
        $this->setIfExists('values_by_mode', $data ?? [], null);
        $this->setIfExists('remote', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('hidden_from_publishing', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('code_syntax', $data ?? [], null);
        $this->setIfExists('deleted_but_referenced', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['variable_collection_id'] === null) {
            $invalidProperties[] = "'variable_collection_id' can't be null";
        }
        if ($this->container['resolved_type'] === null) {
            $invalidProperties[] = "'resolved_type' can't be null";
        }
        $allowedValues = $this->getResolvedTypeAllowableValues();
        if (!is_null($this->container['resolved_type']) && !in_array($this->container['resolved_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resolved_type', must be one of '%s'",
                $this->container['resolved_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['values_by_mode'] === null) {
            $invalidProperties[] = "'values_by_mode' can't be null";
        }
        if ($this->container['remote'] === null) {
            $invalidProperties[] = "'remote' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['hidden_from_publishing'] === null) {
            $invalidProperties[] = "'hidden_from_publishing' can't be null";
        }
        if ($this->container['scopes'] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if ($this->container['code_syntax'] === null) {
            $invalidProperties[] = "'code_syntax' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of this variable.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this variable.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key The key of this variable.
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets variable_collection_id
     *
     * @return string
     */
    public function getVariableCollectionId()
    {
        return $this->container['variable_collection_id'];
    }

    /**
     * Sets variable_collection_id
     *
     * @param string $variable_collection_id The id of the variable collection that contains this variable.
     *
     * @return self
     */
    public function setVariableCollectionId($variable_collection_id)
    {
        if (is_null($variable_collection_id)) {
            throw new \InvalidArgumentException('non-nullable variable_collection_id cannot be null');
        }
        $this->container['variable_collection_id'] = $variable_collection_id;

        return $this;
    }

    /**
     * Gets resolved_type
     *
     * @return string
     */
    public function getResolvedType()
    {
        return $this->container['resolved_type'];
    }

    /**
     * Sets resolved_type
     *
     * @param string $resolved_type The resolved type of the variable.
     *
     * @return self
     */
    public function setResolvedType($resolved_type)
    {
        if (is_null($resolved_type)) {
            throw new \InvalidArgumentException('non-nullable resolved_type cannot be null');
        }
        $allowedValues = $this->getResolvedTypeAllowableValues();
        if (!in_array($resolved_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resolved_type', must be one of '%s'",
                    $resolved_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolved_type'] = $resolved_type;

        return $this;
    }

    /**
     * Gets values_by_mode
     *
     * @return array<string,\OpenAPI\Client\Model\LocalVariableValuesByModeValue>
     */
    public function getValuesByMode()
    {
        return $this->container['values_by_mode'];
    }

    /**
     * Sets values_by_mode
     *
     * @param array<string,\OpenAPI\Client\Model\LocalVariableValuesByModeValue> $values_by_mode The values for each mode of this variable.
     *
     * @return self
     */
    public function setValuesByMode($values_by_mode)
    {
        if (is_null($values_by_mode)) {
            throw new \InvalidArgumentException('non-nullable values_by_mode cannot be null');
        }
        $this->container['values_by_mode'] = $values_by_mode;

        return $this;
    }

    /**
     * Gets remote
     *
     * @return bool
     */
    public function getRemote()
    {
        return $this->container['remote'];
    }

    /**
     * Sets remote
     *
     * @param bool $remote Whether this variable is remote.
     *
     * @return self
     */
    public function setRemote($remote)
    {
        if (is_null($remote)) {
            throw new \InvalidArgumentException('non-nullable remote cannot be null');
        }
        $this->container['remote'] = $remote;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of this variable.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hidden_from_publishing
     *
     * @return bool
     */
    public function getHiddenFromPublishing()
    {
        return $this->container['hidden_from_publishing'];
    }

    /**
     * Sets hidden_from_publishing
     *
     * @param bool $hidden_from_publishing Whether this variable is hidden when publishing the current file as a library.  If the parent `VariableCollection` is marked as `hiddenFromPublishing`, then this variable will also be hidden from publishing via the UI. `hiddenFromPublishing` is independently toggled for a variable and collection. However, both must be true for a given variable to be publishable.
     *
     * @return self
     */
    public function setHiddenFromPublishing($hidden_from_publishing)
    {
        if (is_null($hidden_from_publishing)) {
            throw new \InvalidArgumentException('non-nullable hidden_from_publishing cannot be null');
        }
        $this->container['hidden_from_publishing'] = $hidden_from_publishing;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return \OpenAPI\Client\Model\VariableScope[]
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param \OpenAPI\Client\Model\VariableScope[] $scopes An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.  Setting scopes for a variable does not prevent that variable from being bound in other scopes (for example, via the Plugin API). This only limits the variables that are shown in pickers within the Figma UI.
     *
     * @return self
     */
    public function setScopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException('non-nullable scopes cannot be null');
        }
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets code_syntax
     *
     * @return \OpenAPI\Client\Model\VariableCodeSyntax
     */
    public function getCodeSyntax()
    {
        return $this->container['code_syntax'];
    }

    /**
     * Sets code_syntax
     *
     * @param \OpenAPI\Client\Model\VariableCodeSyntax $code_syntax code_syntax
     *
     * @return self
     */
    public function setCodeSyntax($code_syntax)
    {
        if (is_null($code_syntax)) {
            throw new \InvalidArgumentException('non-nullable code_syntax cannot be null');
        }
        $this->container['code_syntax'] = $code_syntax;

        return $this;
    }

    /**
     * Gets deleted_but_referenced
     *
     * @return bool|null
     */
    public function getDeletedButReferenced()
    {
        return $this->container['deleted_but_referenced'];
    }

    /**
     * Sets deleted_but_referenced
     *
     * @param bool|null $deleted_but_referenced Indicates that the variable was deleted in the editor, but the document may still contain references to the variable. References to the variable may exist through bound values or variable aliases.
     *
     * @return self
     */
    public function setDeletedButReferenced($deleted_but_referenced)
    {
        if (is_null($deleted_but_referenced)) {
            throw new \InvalidArgumentException('non-nullable deleted_but_referenced cannot be null');
        }
        $this->container['deleted_but_referenced'] = $deleted_but_referenced;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


